{
  "doc/LightBDD.Framework.Reporting.Formatters.XmlReportFormatter.html": {
    "href": "doc/LightBDD.Framework.Reporting.Formatters.XmlReportFormatter.html",
    "title": "Class XmlReportFormatter | docfx seed website",
    "keywords": "Class XmlReportFormatter Formats feature results as XML. Inheritance System.Object XmlReportFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting.Formatters Assembly :cs.temp.dll.dll Syntax public class XmlReportFormatter : IReportFormatter Methods Format(Stream, IFeatureResult[]) Formats provided feature results and writes to the stream . Declaration public void Format(Stream stream, params IFeatureResult[] features) Parameters Type Name Description Stream stream Stream to write formatted results to. IFeatureResult [] features Feature results to format. Implements IReportFormatter.Format(Stream, IFeatureResult[])"
  },
  "doc/LightBDD.Framework.Reporting.Formatters.html": {
    "href": "doc/LightBDD.Framework.Reporting.Formatters.html",
    "title": "Namespace LightBDD.Framework.Reporting.Formatters | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Reporting.Formatters Classes HtmlReportFormatter Formats feature results as HTML. PlainTextReportFormatter Formats feature results as plain text. XmlReportFormatter Formats feature results as XML. Interfaces IReportFormatter Report formatter interface."
  },
  "doc/LightBDD.Framework.Reporting.ReportFileWriter.html": {
    "href": "doc/LightBDD.Framework.Reporting.ReportFileWriter.html",
    "title": "Class ReportFileWriter | docfx seed website",
    "keywords": "Class ReportFileWriter Summary file writer class allows to save feature results by using associated result formatter and output path. Inheritance System.Object ReportFileWriter Namespace :LightBDD.Framework.Reporting Assembly :cs.temp.dll.dll Syntax public class ReportFileWriter : IReportWriter Constructors ReportFileWriter(IReportFormatter, String) Constructor allowing to create ReportFileWriter with associated result formatter and output path. Please note that full output path is being resolved at time when constructor is called, not when results are saved, so any relative paths will be resolved at the construction of this class. Declaration public ReportFileWriter(IReportFormatter formatter, string outputPath) Parameters Type Name Description IReportFormatter formatter Report formatter. System.String outputPath Output path. If starts with ~ , it would be resolved to AppContext.BaseDirectory . It can contain string.Format() like parameters of {name:format} syntax. This constructor uses default ReportPathFormatter to format these parameters. See CreateDefault() () for more details on available parameter types. ReportFileWriter(IReportFormatter, String, ReportPathFormatter) Constructor allowing to create ReportFileWriter with associated result formatter, output path and path formatter. Please note that full output path is being resolved at time when constructor is called, not when results are saved, so any relative paths will be resolved at the construction of this class. Declaration public ReportFileWriter(IReportFormatter formatter, string outputPath, ReportPathFormatter pathFormatter) Parameters Type Name Description IReportFormatter formatter Report formatter. System.String outputPath Output path. If starts with ~ , it would be resolved to AppContext.BaseDirectory . It can contain string.Format() like parameters of {name:format} syntax. ReportPathFormatter pathFormatter ReportPathFormatter instance used to format outputPath . Properties Formatter Returns configured formatter. Declaration public IReportFormatter Formatter { get; } Property Value Type Description IReportFormatter FullOutputPath Returns output path resolved to a full path. Declaration public string FullOutputPath { get; } Property Value Type Description System.String OutputPath Returns configured output path. Declaration public string OutputPath { get; } Property Value Type Description System.String Methods Save(IFeatureResult[]) Saves formatted feature results to file specified in constructor. If output path refers to directory which does not exist, it will be created. Declaration public void Save(params IFeatureResult[] results) Parameters Type Name Description IFeatureResult [] results Results to save."
  },
  "doc/LightBDD.Framework.Reporting.ReportFormattablePath.html": {
    "href": "doc/LightBDD.Framework.Reporting.ReportFormattablePath.html",
    "title": "Class ReportFormattablePath | docfx seed website",
    "keywords": "Class ReportFormattablePath Report file formattable path. Inheritance System.Object ReportFormattablePath Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting Assembly :cs.temp.dll.dll Syntax public class ReportFormattablePath Constructors ReportFormattablePath(String, IEnumerable<Func<IFeatureResult[], Object>>) Constructor. Declaration public ReportFormattablePath(string formattablePath, IEnumerable<Func<IFeatureResult[], object>> parameterProviders) Parameters Type Name Description System.String formattablePath Formattable path string with String.Format() syntax. IEnumerable < Func < IFeatureResult [], System.Object >> parameterProviders Parameter providing functions. Properties FormattablePath Returns formattable path specified in constructor. Declaration public string FormattablePath { get; } Property Value Type Description System.String Methods Resolve(IFeatureResult[]) Resolves path by applying all the formats and resolving to a full path. Declaration public string Resolve(IFeatureResult[] results) Parameters Type Name Description IFeatureResult [] results Feature results used in format. Returns Type Description System.String"
  },
  "doc/LightBDD.Framework.Scenarios.Basic.html": {
    "href": "doc/LightBDD.Framework.Scenarios.Basic.html",
    "title": "Namespace LightBDD.Framework.Scenarios.Basic | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Scenarios.Basic Classes BasicScenarioExtensions Extensions class allowing to use basic scenario syntax for running LightBDD tests."
  },
  "doc/LightBDD.Framework.Scenarios.Contextual.ContextualScenarioExtensions.html": {
    "href": "doc/LightBDD.Framework.Scenarios.Contextual.ContextualScenarioExtensions.html",
    "title": "Class ContextualScenarioExtensions | docfx seed website",
    "keywords": "Class ContextualScenarioExtensions Extensions allowing to create contextual IBddRunner instance. Inheritance System.Object ContextualScenarioExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Scenarios.Contextual Assembly :cs.temp.dll.dll Syntax public static class ContextualScenarioExtensions Methods WithContext<TContext>(IBddRunner) Returns runner that would be executing scenarios in dedicated context of TContext type. The context instance would be created by calling default constructor just before scenario execution. Declaration public static IBddRunner<TContext> WithContext<TContext>(this IBddRunner runner)where TContext : new () Parameters Type Name Description IBddRunner runner IBddRunner instance. Returns Type Description IBddRunner <TContext> Contextual runner. Type Parameters Name Description TContext Context type. WithContext<TContext>(IBddRunner, TContext) Specifies that scenario would be executed in dedicated context of TContext type. Declaration public static IBddRunner<TContext> WithContext<TContext>(this IBddRunner runner, TContext context) Parameters Type Name Description IBddRunner runner IBddRunner instance. TContext context Context instance. Returns Type Description IBddRunner <TContext> Contextual runner. Type Parameters Name Description TContext Context type. WithContext<TContext>(IBddRunner, Func<TContext>) Specifies that scenario would be executed in dedicated context of TContext type, created by contextFactory function. The context instance would be created by calling default constructor just before scenario execution. Declaration public static IBddRunner<TContext> WithContext<TContext>(this IBddRunner runner, Func<TContext> contextFactory) Parameters Type Name Description IBddRunner runner IBddRunner instance. Func <TContext> contextFactory Context factory function. Returns Type Description IBddRunner <TContext> Contextual runner. Type Parameters Name Description TContext Context type."
  },
  "doc/LightBDD.Framework.Scenarios.Contextual.html": {
    "href": "doc/LightBDD.Framework.Scenarios.Contextual.html",
    "title": "Namespace LightBDD.Framework.Scenarios.Contextual | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Scenarios.Contextual Classes ContextualScenarioExtensions Extensions allowing to create contextual IBddRunner instance."
  },
  "doc/LightBDD.Framework.Scenarios.Extended.ExtendedScenarioExtensions.html": {
    "href": "doc/LightBDD.Framework.Scenarios.Extended.ExtendedScenarioExtensions.html",
    "title": "Class ExtendedScenarioExtensions | docfx seed website",
    "keywords": "Class ExtendedScenarioExtensions Extensions class allowing to use extended scenario syntax for running LightBDD tests. Inheritance System.Object ExtendedScenarioExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Scenarios.Extended Assembly :cs.temp.dll.dll Syntax public static class ExtendedScenarioExtensions Methods RunScenario<TContext>(IBddRunner<TContext>, Expression<Action<TContext>>[]) Runs test scenario by executing given steps in specified order. If given step throws, other are not executed. Scenario name is determined from the method name in which RunScenario<TContext>(IBddRunner<TContext>, Expression<Action<TContext>>[]) () method was called. Scenario labels are determined from LabelAttribute attributes applied on method in which RunScenario<TContext>(IBddRunner<TContext>, Expression<Action<TContext>>[]) () method was called. Step name is determined from lambda parameter name reflecting action type keyword, corresponding action name and passed list of parameters to called method. If scenario is executed with context, the context instance is provided with lambda parameter. Please note that rules for placing parameter values in step name are as follows, where first matching rule would be used: it will replace first occurrence of variable name written in capital letters ( void Price_is_AMOUNT_dollars(int amount) => Price is \"27\" dollars ) it will placed after first occurrence of variable name ( void Product_is_in_stock(string product) => Product \"desk\" is in stock ) it will placed at the end of step name ( void Product_is_in_stock(string productId) => Product is in stock [productId: \"ABC123\"] ) Example usage for scenarios with no context: [Scenario] [Label(\"Ticket-2\")] public void Receiving_invoice_for_products() { Runner.RunScenario( _ => Given_product_is_available_in_product_storage(\"wooden desk\"), _ => Given_product_is_available_in_product_storage(\"wooden shelf\"), _ => When_customer_buys_product(\"wooden desk\"), _ => When_customer_buys_product(\"wooden shelf\"), _ => Then_an_invoice_should_be_sent_to_the_customer(), _ => Then_invoice_should_contain_product_with_price_of_AMOUNT_pounds(\"wooden desk\", 62), _ => Then_invoice_should_contain_product_with_price_of_AMOUNT_pounds(\"wooden shelf\", 37)); } Expected step signature: void Given_product_is_available_in_product_storage(string product) { /* ... */ } Example usage for scenarios with context: [Scenario] [Label(\"Ticket-3\")] public void Receiving_invoice_for_products() { Runner.WithContext<SpeditionContext>().RunScenario( _ => _.Given_there_is_an_active_customer_with_id(\"ABC-123\"), _ => _.Given_the_customer_has_product_in_basket(\"wooden shelf\"), _ => _.Given_the_customer_has_product_in_basket(\"wooden desk\"), _ => _.When_the_customer_payment_finalizes(), _ => _.Then_product_should_be_dispatched_to_the_customer(\"wooden shelf\"), _ => _.Then_product_should_be_dispatched_to_the_customer(\"wooden desk\")); } Expected step signature: class SpeditionContext { void Given_product_is_available_in_product_storage(string product) { /* ... */ } } Declaration public static void RunScenario<TContext>(this IBddRunner<TContext> runner, params Expression<Action<TContext>>[] steps) Parameters Type Name Description IBddRunner <TContext> runner Runner. Expression < Action <TContext>>[] steps List of steps to execute in order. Type Parameters Name Description TContext RunScenarioActionsAsync<TContext>(IBddRunner<TContext>, Expression<Action<TContext>>[]) Runs test scenario by executing given steps in specified order. If given step throws, other are not executed. Scenario name is determined from the method name in which RunScenarioActionsAsync<TContext>(IBddRunner<TContext>, Expression<Action<TContext>>[]) () method was called. Scenario labels are determined from LabelAttribute attributes applied on method in which RunScenarioActionsAsync<TContext>(IBddRunner<TContext>, Expression<Action<TContext>>[]) () method was called. Step name is determined from lambda parameter name reflecting action type keyword, corresponding action name and passed list of parameters to called method. If scenario is executed with context, the context instance is provided with lambda parameter. Please note that rules for placing parameter values in step name are as follows, where first matching rule would be used: it will replace first occurrence of variable name written in capital letters ( void Price_is_AMOUNT_dollars(int amount) => Price is \"27\" dollars ) it will placed after first occurrence of variable name ( void Product_is_in_stock(string product) => Product \"desk\" is in stock ) it will placed at the end of step name ( void Product_is_in_stock(string productId) => Product is in stock [productId: \"ABC123\"] ) Example usage for scenarios with no context: [Scenario] [Label(\"Ticket-2\")] public Task Receiving_invoice_for_products() { return Runner.RunScenarioActionsAsync( _ => Given_product_is_available_in_product_storage(\"wooden desk\"), _ => Given_product_is_available_in_product_storage(\"wooden shelf\"), _ => When_customer_buys_product(\"wooden desk\"), _ => When_customer_buys_product(\"wooden shelf\"), _ => Then_an_invoice_should_be_sent_to_the_customer(), _ => Then_invoice_should_contain_product_with_price_of_AMOUNT_pounds(\"wooden desk\", 62), _ => Then_invoice_should_contain_product_with_price_of_AMOUNT_pounds(\"wooden shelf\", 37)); } Expected step signature: async void Given_product_is_available_in_product_storage(string product) { /* ... */ } or void Given_product_is_available_in_product_storage(string product) { /* ... */ } Example usage for scenarios with context: [Scenario] [Label(\"Ticket-3\")] public Task Receiving_invoice_for_products() { return Runner.WithContext<SpeditionContext>().RunScenarioActionsAsync( _ => _.Given_there_is_an_active_customer_with_id(\"ABC-123\"), _ => _.Given_the_customer_has_product_in_basket(\"wooden shelf\"), _ => _.Given_the_customer_has_product_in_basket(\"wooden desk\"), _ => _.When_the_customer_payment_finalizes(), _ => _.Then_product_should_be_dispatched_to_the_customer(\"wooden shelf\"), _ => _.Then_product_should_be_dispatched_to_the_customer(\"wooden desk\")); } Expected step signature: class SpeditionContext { async void Given_product_is_available_in_product_storage(string product) { /* ... */ } } or class SpeditionContext { void Given_product_is_available_in_product_storage(string product) { /* ... */ } } Declaration public static Task RunScenarioActionsAsync<TContext>(this IBddRunner<TContext> runner, params Expression<Action<TContext>>[] steps) Parameters Type Name Description IBddRunner <TContext> runner Runner. Expression < Action <TContext>>[] steps List of steps to execute in order. Returns Type Description Task Type Parameters Name Description TContext Remarks This is an asynchronous method and should be awaited. RunScenarioAsync<TContext>(IBddRunner<TContext>, Expression<Func<TContext, Task>>[]) Runs test scenario by executing given steps in specified order. If given step throws, other are not executed. Scenario name is determined from the method name in which RunScenarioAsync<TContext>(IBddRunner<TContext>, Expression<Func<TContext, Task>>[]) () method was called. Scenario labels are determined from LabelAttribute attributes applied on method in which RunScenarioAsync<TContext>(IBddRunner<TContext>, Expression<Func<TContext, Task>>[]) () method was called. Step name is determined from lambda parameter name reflecting action type keyword, corresponding action name and passed list of parameters to called method. If scenario is executed with context, the context instance is provided with lambda parameter. Please note that rules for placing parameter values in step name are as follows, where first matching rule would be used: it will replace first occurrence of variable name written in capital letters ( Task Price_is_AMOUNT_dollars(int amount) => Price is \"27\" dollars ) it will placed after first occurrence of variable name ( Task Product_is_in_stock(string product) => Product \"desk\" is in stock ) it will placed at the end of step name ( Task Product_is_in_stock(string productId) => Product is in stock [productId: \"ABC123\"] ) Example usage for scenarios with no context: [Scenario] [Label(\"Ticket-2\")] public Task Receiving_invoice_for_products() { return Runner.RunScenarioAsync( _ => Given_product_is_available_in_product_storage(\"wooden desk\"), _ => Given_product_is_available_in_product_storage(\"wooden shelf\"), _ => When_customer_buys_product(\"wooden desk\"), _ => When_customer_buys_product(\"wooden shelf\"), _ => Then_an_invoice_should_be_sent_to_the_customer(), _ => Then_invoice_should_contain_product_with_price_of_AMOUNT_pounds(\"wooden desk\", 62), _ => Then_invoice_should_contain_product_with_price_of_AMOUNT_pounds(\"wooden shelf\", 37)); } Expected step signature: async Task Given_product_is_available_in_product_storage(string product) { /* ... */ } Example usage for scenarios with context: [Scenario] [Label(\"Ticket-3\")] public Task Receiving_invoice_for_products() { return Runner.WithContext<SpeditionContext>().RunScenarioAsync( _ => _.Given_there_is_an_active_customer_with_id(\"ABC-123\"), _ => _.Given_the_customer_has_product_in_basket(\"wooden shelf\"), _ => _.Given_the_customer_has_product_in_basket(\"wooden desk\"), _ => _.When_the_customer_payment_finalizes(), _ => _.Then_product_should_be_dispatched_to_the_customer(\"wooden shelf\"), _ => _.Then_product_should_be_dispatched_to_the_customer(\"wooden desk\")); } Expected step signature: class SpeditionContext { async Task Given_product_is_available_in_product_storage(string product) { /* ... */ } } Declaration public static Task RunScenarioAsync<TContext>(this IBddRunner<TContext> runner, params Expression<Func<TContext, Task>>[] steps) Parameters Type Name Description IBddRunner <TContext> runner Runner. Expression < Func <TContext, Task >>[] steps List of steps to execute in order. Returns Type Description Task Type Parameters Name Description TContext Remarks This is an asynchronous method and should be awaited."
  },
  "doc/LightBDD.Framework.Scenarios.Extended.html": {
    "href": "doc/LightBDD.Framework.Scenarios.Extended.html",
    "title": "Namespace LightBDD.Framework.Scenarios.Extended | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Scenarios.Extended Classes ExtendedScenarioExtensions Extensions class allowing to use extended scenario syntax for running LightBDD tests."
  },
  "doc/LightBDD.Framework.StepExecution.html": {
    "href": "doc/LightBDD.Framework.StepExecution.html",
    "title": "Class StepExecution | docfx seed website",
    "keywords": "Class StepExecution Step execution class, allowing to control step execution from method executing step. Inheritance System.Object StepExecution Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public class StepExecution Properties Current Returns current step execution instance. Reference by Current property enables LightBDD extension packages to add functionality to StepExecution with extension methods. Declaration public static StepExecution Current { get; } Property Value Type Description StepExecution Methods Bypass(String) Bypasses currently executed step and continues execution of current scenario, allowing to execute all remaining steps. The step code located after StepExecution.Current.Bypass() call would not be executed. The status of bypassed step would be and the overall status of scenario would be , unless any further step is failed or ignored. Scenarios with status are recognized as successful tests in underlying test framework. The reason argument would be used as step , and it would be aggregated in overall scenario as well. The Bypass(String) () method could be used in situations when: It is not possible to implement given step at the moment (no required API is implemented yet), but all other steps are precise enough to prove that scenario is successful, i.e. situation when scenario checks overall and detailed cost of product and one of price component cannot be retrieved. Step implementation does not exists, but it is possible to simulate it, so further steps can be executed, i.e. end-to-end tests, where the middle component does not exist yet. The required API is not exposed yet, but it is possible to implement a workaround like direct data insert to database. Declaration public void Bypass(string reason) Parameters Type Name Description System.String reason Bypass reason."
  },
  "doc/LightBDD.Framework.html": {
    "href": "doc/LightBDD.Framework.html",
    "title": "Namespace LightBDD.Framework | docfx seed website",
    "keywords": "Namespace LightBDD.Framework Classes FeatureDescriptionAttribute Feature description attribute that can be applied on feature test class. May be used to enrich feature class with description like \"In order to... As a... I want to...\" or similar, that would be used by progress notifier and would be included in summary. If given implementation supports alternative description attributes, and both are applied on class, this one would be used. LabelAttribute Label attribute that can be applied on feature test class or scenario method. May be used to link feature/scenario with external tools by storing ticket number. Multiple labels per item are supported. NoContext Class used to indicate that IBddRunner will execute scenarios without any additional context. ScenarioCategoryAttribute Scenario category attribute that can be applied on scenario test method. May be used to associate scenarios with specific categories. It is possible to apply multiple ScenarioCategory attributes on given scenario. If given implementation supports alternative category attributes, and both are applied on scenario method, all of them would be used. StepExecution Step execution class, allowing to control step execution from method executing step. Interfaces IBddRunner Main LightBDD runner interface that should be used in all LightBDD tests. The interface describes the runner with no context - please browse \"LightBDD.Framework.Scenarios.Contextual\" namespace for contextual runners extension methods. The runner instance can be obtained by installing package from \"LightBDD.Integration. \" group and deriving test class from FeatureFixture class offered by integration package. The \"LightBDD.Framework.Scenarios. \" namespaces offers a set of extension methods to execute tests with this runner. IBddRunner<TContext> The base runner interface describing runner that can execute scenarios within specified context. See also: IBddRunner ."
  },
  "doc/LightBDD.MsTest2.FeatureFixture.html": {
    "href": "doc/LightBDD.MsTest2.FeatureFixture.html",
    "title": "Class FeatureFixture | docfx seed website",
    "keywords": "Class FeatureFixture Base class for feature tests with MSTest framework. It offers Runner property allowing to execute scenarios belonging to the feature class. Inheritance System.Object FeatureFixture Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.MsTest2 Assembly :cs.temp.dll.dll Syntax public class FeatureFixture Constructors FeatureFixture() Default constructor initializing Runner for feature class instance. Declaration protected FeatureFixture() Properties Runner Returns allowing to execute scenarios belonging to the feature class. Declaration protected IBddRunner Runner { get; } Property Value Type Description IBddRunner"
  },
  "doc/LightBDD.MsTest2.html": {
    "href": "doc/LightBDD.MsTest2.html",
    "title": "Namespace LightBDD.MsTest2 | docfx seed website",
    "keywords": "Namespace LightBDD.MsTest2 Classes FeatureFixture Base class for feature tests with MSTest framework. It offers Runner property allowing to execute scenarios belonging to the feature class. FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. It should be used for running LightBDD tests with MSTest testing framework. FeatureRunnerProvider Class allowing to instantiate that is being configured to work with MsTest framework. LightBddScope LightBddScope class allowing to initialize and finalize LightBDD in MsTest framework. Example showing how to initialize LightBDD in MsTest framework: [TestClass] class LightBddIntegration { [AssemblyInitialize] public static void Setup(TestContext testContext){ LightBddScope.Initialize(); } [AssemblyCleanup] public static void Cleanup(){ LightBddScope.Cleanup(); } } ScenarioAttribute Scenario attribute that should be used for MsTest framework tests, as a replacement for [TestMethod] attribute. The ScenarioAttribute represents scenario test method."
  },
  "doc/LightBDD.NUnit2.FeatureFixture.html": {
    "href": "doc/LightBDD.NUnit2.FeatureFixture.html",
    "title": "Class FeatureFixture | docfx seed website",
    "keywords": "Class FeatureFixture Base class for feature tests with NUnit framework. It offers Runner property allowing to execute scenarios belonging to the feature class. Inheritance System.Object FeatureFixture Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.NUnit2 Assembly :cs.temp.dll.dll Syntax public class FeatureFixture Constructors FeatureFixture() Default constructor initializing Runner for feature class instance. Declaration protected FeatureFixture() Properties Runner Returns allowing to execute scenarios belonging to the feature class. Declaration protected IBddRunner Runner { get; } Property Value Type Description IBddRunner Methods FeatureFixtureTearDown() Feature fixture tear down method disposing Runner after all tests are executed. Declaration public void FeatureFixtureTearDown()"
  },
  "doc/LightBDD.NUnit2.FeatureFixtureAttribute.html": {
    "href": "doc/LightBDD.NUnit2.FeatureFixtureAttribute.html",
    "title": "Class FeatureFixtureAttribute | docfx seed website",
    "keywords": "Class FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. It is required for running LightBDD tests with NUnit testing framework. Inheritance System.Object FeatureFixtureAttribute Namespace :LightBDD.NUnit2 Assembly :cs.temp.dll.dll Syntax public class FeatureFixtureAttribute : Attribute, ITestAction Properties Targets Provides the target for the action attribute Declaration public ActionTargets Targets { get; } Property Value Type Description ActionTargets The target for the action attribute Methods AfterTest(TestDetails) Executed after each test is run Declaration public void AfterTest(TestDetails testDetails) Parameters Type Name Description TestDetails testDetails Provides details about the test that has just been run. BeforeTest(TestDetails) Executed before each test is run Declaration public void BeforeTest(TestDetails testDetails) Parameters Type Name Description TestDetails testDetails Provides details about the test that is going to be run."
  },
  "doc/LightBDD.NUnit2.FeatureRunnerProvider.html": {
    "href": "doc/LightBDD.NUnit2.FeatureRunnerProvider.html",
    "title": "Class FeatureRunnerProvider | docfx seed website",
    "keywords": "Class FeatureRunnerProvider Class allowing to instantiate that is being configured to work with NUnit framework. Inheritance System.Object FeatureRunnerProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.NUnit2 Assembly :cs.temp.dll.dll Syntax public static class FeatureRunnerProvider Methods GetRunnerFor(Type) Returns for given featureType . Declaration public static IFeatureRunner GetRunnerFor(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description IFeatureRunner object."
  },
  "doc/LightBDD.NUnit2.LightBddScopeAttribute.html": {
    "href": "doc/LightBDD.NUnit2.LightBddScopeAttribute.html",
    "title": "Class LightBddScopeAttribute | docfx seed website",
    "keywords": "Class LightBddScopeAttribute An attribute allowing to initialize and finalize LightBDD in NUnit framework. The [assembly:LightBddScope] attribute has to be present in assembly containing LightBDD tests. It is possible to customize the LightBDD configuration by overriding the OnConfigure(LightBddConfiguration) () method. Inheritance System.Object LightBddScopeAttribute Namespace :LightBDD.NUnit2 Assembly :cs.temp.dll.dll Syntax public class LightBddScopeAttribute : Attribute, ITestAction Properties Targets Provides the target for the action attribute Declaration public ActionTargets Targets { get; } Property Value Type Description ActionTargets The target for the action attribute Methods AfterTest(TestDetails) Executed after each test is run Declaration public void AfterTest(TestDetails testDetails) Parameters Type Name Description TestDetails testDetails Provides details about the test that has just been run. BeforeTest(TestDetails) Executed before each test is run Declaration public void BeforeTest(TestDetails testDetails) Parameters Type Name Description TestDetails testDetails Provides details about the test that is going to be run. OnConfigure(LightBddConfiguration) Allows to customize LightBDD configuration. Declaration protected virtual void OnConfigure(LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration to customize. OnSetUp() Allows to execute additional actions after LightBDD scope initialization Declaration protected virtual void OnSetUp() OnTearDown() Allows to execute additional cleanup just after LightBDD scope termination Declaration protected virtual void OnTearDown()"
  },
  "doc/LightBDD.NUnit2.ScenarioAttribute.html": {
    "href": "doc/LightBDD.NUnit2.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | docfx seed website",
    "keywords": "Class ScenarioAttribute Scenario attribute that should be used for NUnit framework tests, as a replacement for [Test] attribute. The ScenarioAttribute represents scenario test method. Inheritance System.Object ScenarioAttribute Namespace :LightBDD.NUnit2 Assembly :cs.temp.dll.dll Syntax public class ScenarioAttribute : TestAttribute"
  },
  "doc/LightBDD.NUnit2.html": {
    "href": "doc/LightBDD.NUnit2.html",
    "title": "Namespace LightBDD.NUnit2 | docfx seed website",
    "keywords": "Namespace LightBDD.NUnit2 Classes FeatureFixture Base class for feature tests with NUnit framework. It offers Runner property allowing to execute scenarios belonging to the feature class. FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. It is required for running LightBDD tests with NUnit testing framework. FeatureRunnerProvider Class allowing to instantiate that is being configured to work with NUnit framework. LightBddScopeAttribute An attribute allowing to initialize and finalize LightBDD in NUnit framework. The [assembly:LightBddScope] attribute has to be present in assembly containing LightBDD tests. It is possible to customize the LightBDD configuration by overriding the OnConfigure(LightBddConfiguration) () method. ScenarioAttribute Scenario attribute that should be used for NUnit framework tests, as a replacement for [Test] attribute. The ScenarioAttribute represents scenario test method."
  },
  "doc/LightBDD.NUnit3.FeatureFixture.html": {
    "href": "doc/LightBDD.NUnit3.FeatureFixture.html",
    "title": "Class FeatureFixture | docfx seed website",
    "keywords": "Class FeatureFixture Base class for feature tests with NUnit framework. It offers Runner property allowing to execute scenarios belonging to the feature class. Inheritance System.Object FeatureFixture Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.NUnit3 Assembly :cs.temp.dll.dll Syntax public class FeatureFixture Constructors FeatureFixture() Default constructor initializing Runner for feature class instance. Declaration protected FeatureFixture() Properties Runner Returns allowing to execute scenarios belonging to the feature class. Declaration protected IBddRunner Runner { get; } Property Value Type Description IBddRunner Methods FeatureFixtureTearDown() Feature fixture tear down method disposing Runner after all tests are executed. Declaration public void FeatureFixtureTearDown()"
  },
  "doc/LightBDD.NUnit3.FeatureFixtureAttribute.html": {
    "href": "doc/LightBDD.NUnit3.FeatureFixtureAttribute.html",
    "title": "Class FeatureFixtureAttribute | docfx seed website",
    "keywords": "Class FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. It is required for running LightBDD tests with NUnit testing framework. Inheritance System.Object FeatureFixtureAttribute Namespace :LightBDD.NUnit3 Assembly :cs.temp.dll.dll Syntax public class FeatureFixtureAttribute : Attribute, ITestAction Properties Targets Provides the target for the action attribute Declaration public ActionTargets Targets { get; } Property Value Type Description ActionTargets The target for the action attribute Methods AfterTest(ITest) Executed after each test is run Declaration public void AfterTest(ITest test) Parameters Type Name Description ITest test The test that has just been run. BeforeTest(ITest) Executed before each test is run Declaration public void BeforeTest(ITest test) Parameters Type Name Description ITest test The test that is going to be run."
  },
  "doc/LightBDD.NUnit3.FeatureRunnerProvider.html": {
    "href": "doc/LightBDD.NUnit3.FeatureRunnerProvider.html",
    "title": "Class FeatureRunnerProvider | docfx seed website",
    "keywords": "Class FeatureRunnerProvider Class allowing to instantiate that is being configured to work with NUnit framework. Inheritance System.Object FeatureRunnerProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.NUnit3 Assembly :cs.temp.dll.dll Syntax public static class FeatureRunnerProvider Methods GetRunnerFor(Type) Returns for given featureType . Declaration public static IFeatureRunner GetRunnerFor(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description IFeatureRunner object."
  },
  "doc/LightBDD.NUnit3.LightBddScopeAttribute.html": {
    "href": "doc/LightBDD.NUnit3.LightBddScopeAttribute.html",
    "title": "Class LightBddScopeAttribute | docfx seed website",
    "keywords": "Class LightBddScopeAttribute An attribute allowing to initialize and finalize LightBDD in NUnit framework. The [assembly:LightBddScope] attribute has to be present in assembly containing LightBDD tests. It is possible to customize the LightBDD configuration by overriding the OnConfigure(LightBddConfiguration) () method. Inheritance System.Object LightBddScopeAttribute Namespace :LightBDD.NUnit3 Assembly :cs.temp.dll.dll Syntax public class LightBddScopeAttribute : Attribute, ITestAction Properties Targets Provides the target for the action attribute Declaration public ActionTargets Targets { get; } Property Value Type Description ActionTargets The target for the action attribute Methods AfterTest(ITest) Executed after each test is run Declaration public void AfterTest(ITest test) Parameters Type Name Description ITest test The test that has just been run. BeforeTest(ITest) Executed before each test is run Declaration public void BeforeTest(ITest test) Parameters Type Name Description ITest test The test that is going to be run. OnConfigure(LightBddConfiguration) Allows to customize LightBDD configuration. Declaration protected virtual void OnConfigure(LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration to customize. OnSetUp() Allows to execute additional actions after LightBDD scope initialization Declaration protected virtual void OnSetUp() OnTearDown() Allows to execute additional cleanup just after LightBDD scope termination Declaration protected virtual void OnTearDown()"
  },
  "doc/LightBDD.NUnit3.ScenarioAttribute.html": {
    "href": "doc/LightBDD.NUnit3.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | docfx seed website",
    "keywords": "Class ScenarioAttribute Scenario attribute that should be used for NUnit framework tests, as a replacement for [Test] attribute. The ScenarioAttribute represents scenario test method. Inheritance System.Object ScenarioAttribute Namespace :LightBDD.NUnit3 Assembly :cs.temp.dll.dll Syntax public class ScenarioAttribute : TestAttribute"
  },
  "doc/LightBDD.NUnit3.html": {
    "href": "doc/LightBDD.NUnit3.html",
    "title": "Namespace LightBDD.NUnit3 | docfx seed website",
    "keywords": "Namespace LightBDD.NUnit3 Classes FeatureFixture Base class for feature tests with NUnit framework. It offers Runner property allowing to execute scenarios belonging to the feature class. FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. It is required for running LightBDD tests with NUnit testing framework. FeatureRunnerProvider Class allowing to instantiate that is being configured to work with NUnit framework. LightBddScopeAttribute An attribute allowing to initialize and finalize LightBDD in NUnit framework. The [assembly:LightBddScope] attribute has to be present in assembly containing LightBDD tests. It is possible to customize the LightBDD configuration by overriding the OnConfigure(LightBddConfiguration) () method. ScenarioAttribute Scenario attribute that should be used for NUnit framework tests, as a replacement for [Test] attribute. The ScenarioAttribute represents scenario test method."
  },
  "doc/LightBDD.XUnit2.FeatureFixture.html": {
    "href": "doc/LightBDD.XUnit2.FeatureFixture.html",
    "title": "Class FeatureFixture | docfx seed website",
    "keywords": "Class FeatureFixture Base class for feature tests with XUnit framework. It offers Runner property allowing to execute scenarios belonging to the feature class. Inheritance System.Object FeatureFixture Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public class FeatureFixture : ITestOutputProvider Constructors FeatureFixture(ITestOutputHelper) Default constructor initializing Runner for feature class instance as well as configures TestOutput with output . Declaration protected FeatureFixture(ITestOutputHelper output) Parameters Type Name Description ITestOutputHelper output Properties Runner Returns allowing to execute scenarios belonging to the feature class. Declaration protected IBddRunner Runner { get; } Property Value Type Description IBddRunner TestOutput Returns associated to the test class instance. Declaration public ITestOutputHelper TestOutput { get; } Property Value Type Description ITestOutputHelper Implements ITestOutputProvider.TestOutput"
  },
  "doc/LightBDD.XUnit2.FeatureFixtureAttribute.html": {
    "href": "doc/LightBDD.XUnit2.FeatureFixtureAttribute.html",
    "title": "Class FeatureFixtureAttribute | docfx seed website",
    "keywords": "Class FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. For XUnit integration this attribute is meaningless and it is present for backward compatibility. Inheritance System.Object FeatureFixtureAttribute Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public class FeatureFixtureAttribute : BeforeAfterTestAttribute"
  },
  "doc/LightBDD.XUnit2.FeatureRunnerProvider.html": {
    "href": "doc/LightBDD.XUnit2.FeatureRunnerProvider.html",
    "title": "Class FeatureRunnerProvider | docfx seed website",
    "keywords": "Class FeatureRunnerProvider Class allowing to instantiate that is being configured to work with XUnit framework. Inheritance System.Object FeatureRunnerProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public static class FeatureRunnerProvider Methods GetRunnerFor(Type) Returns for given featureType . Declaration public static IFeatureRunner GetRunnerFor(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description IFeatureRunner object."
  },
  "doc/LightBDD.XUnit2.ITestOutputProvider.html": {
    "href": "doc/LightBDD.XUnit2.ITestOutputProvider.html",
    "title": "Interface ITestOutputProvider | docfx seed website",
    "keywords": "Interface ITestOutputProvider An interface allowing to retrieve associated to the test class instance. Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public interface ITestOutputProvider Properties TestOutput Returns associated to the test class instance. Declaration ITestOutputHelper TestOutput { get; } Property Value Type Description ITestOutputHelper"
  },
  "doc/LightBDD.XUnit2.LightBddScopeAttribute.html": {
    "href": "doc/LightBDD.XUnit2.LightBddScopeAttribute.html",
    "title": "Class LightBddScopeAttribute | docfx seed website",
    "keywords": "Class LightBddScopeAttribute An attribute allowing to initialize and finalize LightBDD in XUnit framework. The [assembly:LightBddScope] attribute has to be present in assembly containing LightBDD tests. It is possible to customize the LightBDD configuration by overriding the OnConfigure(LightBddConfiguration) () method. Inheritance System.Object LightBddScopeAttribute Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public class LightBddScopeAttribute : Attribute, ITestFrameworkAttribute Methods OnConfigure(LightBddConfiguration) Allows to customize LightBDD configuration. Declaration protected virtual void OnConfigure(LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration to customize. OnSetUp() Allows to execute additional actions after LightBDD scope initialization Declaration protected virtual void OnSetUp() OnTearDown() Allows to execute additional cleanup just after LightBDD scope termination Declaration protected virtual void OnTearDown()"
  },
  "doc/LightBDD.XUnit2.ScenarioAttribute.html": {
    "href": "doc/LightBDD.XUnit2.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | docfx seed website",
    "keywords": "Class ScenarioAttribute Scenario attribute that should be used for XUnit framework tests, as a replacement for [Fact] and [Theory] attributes. The ScenarioAttribute represents scenario test method. Inheritance System.Object ScenarioAttribute Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public class ScenarioAttribute : FactAttribute"
  },
  "doc/LightBDD.XUnit2.StepExecutionExtensions.html": {
    "href": "doc/LightBDD.XUnit2.StepExecutionExtensions.html",
    "title": "Class StepExecutionExtensions | docfx seed website",
    "keywords": "Class StepExecutionExtensions Extension class for allowing to ignore currently running steps. Inheritance System.Object StepExecutionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.XUnit2 Assembly :cs.temp.dll.dll Syntax public static class StepExecutionExtensions Methods IgnoreScenario(StepExecution, String) Aborts execution of current scenario, marking scenario ignored. The currently executed step as well as scenario status becomes in LightBDD reports, while test itself would be marked as 'Skipped' in xUnit. Declaration public static void IgnoreScenario(this StepExecution execution, string reason) Parameters Type Name Description StepExecution execution Current step execution instance. System.String reason Ignore reason."
  },
  "doc/LightBDD.XUnit2.html": {
    "href": "doc/LightBDD.XUnit2.html",
    "title": "Namespace LightBDD.XUnit2 | docfx seed website",
    "keywords": "Namespace LightBDD.XUnit2 Classes FeatureFixture Base class for feature tests with XUnit framework. It offers Runner property allowing to execute scenarios belonging to the feature class. FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. For XUnit integration this attribute is meaningless and it is present for backward compatibility. FeatureRunnerProvider Class allowing to instantiate that is being configured to work with XUnit framework. LightBddScopeAttribute An attribute allowing to initialize and finalize LightBDD in XUnit framework. The [assembly:LightBddScope] attribute has to be present in assembly containing LightBDD tests. It is possible to customize the LightBDD configuration by overriding the OnConfigure(LightBddConfiguration) () method. ScenarioAttribute Scenario attribute that should be used for XUnit framework tests, as a replacement for [Fact] and [Theory] attributes. The ScenarioAttribute represents scenario test method. StepExecutionExtensions Extension class for allowing to ignore currently running steps. Interfaces ITestOutputProvider An interface allowing to retrieve associated to the test class instance."
  },
  "doc/LightBDD.Core.Configuration.CultureInfoProviderConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.CultureInfoProviderConfiguration.html",
    "title": "Class CultureInfoProviderConfiguration | docfx seed website",
    "keywords": "Class CultureInfoProviderConfiguration Culture info provider configuration. Inheritance System.Object FeatureConfiguration CultureInfoProviderConfiguration Inherited Members FeatureConfiguration.ISealableFeatureConfiguration.Seal() FeatureConfiguration.IsSealed FeatureConfiguration.ThrowIfSealed() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public class CultureInfoProviderConfiguration : FeatureConfiguration, ISealableFeatureConfiguration, IFeatureConfiguration Constructors CultureInfoProviderConfiguration() Default constructor configuring as CultureInfoProvider. Declaration public CultureInfoProviderConfiguration() Properties CultureInfoProvider Culture info provider. Declaration public ICultureInfoProvider CultureInfoProvider { get; } Property Value Type Description ICultureInfoProvider Methods UpdateCultureInfoProvider(ICultureInfoProvider) Updates current culture info provider. Declaration public CultureInfoProviderConfiguration UpdateCultureInfoProvider(ICultureInfoProvider provider) Parameters Type Name Description ICultureInfoProvider provider New provider instance to set. Returns Type Description CultureInfoProviderConfiguration Self."
  },
  "doc/LightBDD.Core.Configuration.FeatureConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.FeatureConfiguration.html",
    "title": "Class FeatureConfiguration | docfx seed website",
    "keywords": "Class FeatureConfiguration A base class of FeatureConfiguration with sealed state detection. Inheritance System.Object FeatureConfiguration CultureInfoProviderConfiguration ExecutionExtensionsConfiguration StepTypeConfiguration Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public abstract class FeatureConfiguration : ISealableFeatureConfiguration, IFeatureConfiguration Properties IsSealed Returns true if configuration is sealed. Declaration protected bool IsSealed { get; } Property Value Type Description System.Boolean Methods ThrowIfSealed() Throws when configuration is already sealed. Declaration protected void ThrowIfSealed() Explicit Interface Implementations ISealableFeatureConfiguration.Seal() Declaration void ISealableFeatureConfiguration.Seal() Implements ISealableFeatureConfiguration.Seal()"
  },
  "doc/LightBDD.Core.Configuration.ISealableFeatureConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.ISealableFeatureConfiguration.html",
    "title": "Interface ISealableFeatureConfiguration | docfx seed website",
    "keywords": "Interface ISealableFeatureConfiguration A LightBDD feature configuration that could be sealed, making it immutable. Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public interface ISealableFeatureConfiguration : IFeatureConfiguration Methods Seal() Seals the configuration making it immutable. Declaration void Seal()"
  },
  "doc/LightBDD.Core.Configuration.StepTypeConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.StepTypeConfiguration.html",
    "title": "Class StepTypeConfiguration | docfx seed website",
    "keywords": "Class StepTypeConfiguration Step type configuration allowing to define step types recognized by LightBDD. Inheritance System.Object FeatureConfiguration StepTypeConfiguration Inherited Members FeatureConfiguration.ISealableFeatureConfiguration.Seal() FeatureConfiguration.IsSealed FeatureConfiguration.ThrowIfSealed() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public class StepTypeConfiguration : FeatureConfiguration, ISealableFeatureConfiguration, IFeatureConfiguration Constructors StepTypeConfiguration() Default constructor initializing configuration with DefaultRepeatedStepReplacement and DefaultPredefinedStepTypes . Declaration public StepTypeConfiguration() Fields DefaultPredefinedStepTypes Default predefined step types: given, when, then, setup, and Declaration public static readonly IEnumerable<string> DefaultPredefinedStepTypes Field Value Type Description IEnumerable < System.String > DefaultRepeatedStepReplacement Default repeated step replacement: and Declaration public static readonly string DefaultRepeatedStepReplacement Field Value Type Description System.String Properties PredefinedStepTypes Current collection of predefined step types that would be used to recognize step type in the parsed step method name. See also: StepTypeConfiguration . Declaration public IEnumerable<string> PredefinedStepTypes { get; } Property Value Type Description IEnumerable < System.String > RepeatedStepReplacement Current value of repeated step replacement that would be used to replace consecutive steps of the same type. See also: StepTypeConfiguration . Declaration public string RepeatedStepReplacement { get; } Property Value Type Description System.String UseLambdaNameAsStepType Function defining if given lambda parameter name should be used as step type. By default any name with length longer than 1 character will be treated as a valid step type while names with 1 character will not. Declaration public Func<string, bool> UseLambdaNameAsStepType { get; } Property Value Type Description Func < System.String , System.Boolean > Methods UpdatePredefinedStepTypes(String[]) Updates current predefined step types. Declaration public StepTypeConfiguration UpdatePredefinedStepTypes(params string[] stepTypes) Parameters Type Name Description System.String [] stepTypes New step types to set. Returns Type Description StepTypeConfiguration Self. UpdateRepeatedStepReplacement(String) Updates current repeated step replacement. Declaration public StepTypeConfiguration UpdateRepeatedStepReplacement(string replacement) Parameters Type Name Description System.String replacement Replacement to set. Returns Type Description StepTypeConfiguration Self. UpdateUseLambdaNameAsStepType(Func<String, Boolean>) Updates UseLambdaNameAsStepType with new function. Declaration public StepTypeConfiguration UpdateUseLambdaNameAsStepType(Func<string, bool> useLambdaNameAsStepTypeFunction) Parameters Type Name Description Func < System.String , System.Boolean > useLambdaNameAsStepTypeFunction Function to use. Returns Type Description StepTypeConfiguration Self."
  },
  "doc/LightBDD.Core.Execution.Coordination.FeatureCoordinator.html": {
    "href": "doc/LightBDD.Core.Execution.Coordination.FeatureCoordinator.html",
    "title": "Class FeatureCoordinator | docfx seed website",
    "keywords": "Class FeatureCoordinator Feature coordinator singleton class holding allowing to instantiate runners as well as IFeatureAggregator used for aggregate execution results on coordinator disposal. Inheritance System.Object FeatureCoordinator Namespace :LightBDD.Core.Execution.Coordination Assembly :cs.temp.dll.dll Syntax public abstract class FeatureCoordinator : IDisposable Constructors FeatureCoordinator(FeatureRunnerRepository, IFeatureAggregator) Constructor. Declaration protected FeatureCoordinator(FeatureRunnerRepository runnerRepository, IFeatureAggregator featureAggregator) Parameters Type Name Description FeatureRunnerRepository runnerRepository Runner factory instance that would be used for instantiating runners. IFeatureAggregator featureAggregator Feature aggregator instance used for aggregating feature results on coordinator disposal. Properties Instance Feature coordinator instance. Declaration protected static FeatureCoordinator Instance { get; } Property Value Type Description FeatureCoordinator IsDisposed Returns true if already disposed, otherwise false . Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean RunnerRepository Runner factory. Declaration public FeatureRunnerRepository RunnerRepository { get; } Property Value Type Description FeatureRunnerRepository Methods Dispose() Disposes coordinator, triggering feature result aggregation. Each runner belonging to RunnerRepository , is disposed and its feature result is aggregated. After aggregation of all results, the feature aggregator is disposed as well. If coordinator is already disposed, methods does nothing. Declaration public void Dispose() Install(FeatureCoordinator) Installs the specified feature coordinator in thread safe manner. Declaration protected static void Install(FeatureCoordinator coordinator) Parameters Type Name Description FeatureCoordinator coordinator Coordinator instance to install."
  },
  "doc/LightBDD.Core.Execution.Coordination.html": {
    "href": "doc/LightBDD.Core.Execution.Coordination.html",
    "title": "Namespace LightBDD.Core.Execution.Coordination | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Execution.Coordination Classes FeatureCoordinator Feature coordinator singleton class holding allowing to instantiate runners as well as IFeatureAggregator used for aggregate execution results on coordinator disposal. Interfaces IFeatureAggregator Feature aggregator interface for collecting feature results."
  },
  "doc/LightBDD.Core.Execution.StepBypassException.html": {
    "href": "doc/LightBDD.Core.Execution.StepBypassException.html",
    "title": "Class StepBypassException | docfx seed website",
    "keywords": "Class StepBypassException Step bypass exception used to mark step bypassed Inheritance System.Object StepBypassException Namespace :LightBDD.Core.Execution Assembly :cs.temp.dll.dll Syntax public class StepBypassException : Exception Constructors StepBypassException(String) Constructor allowing to specify bypass reason. Declaration public StepBypassException(string reason) Parameters Type Name Description System.String reason Bypass reason."
  },
  "doc/LightBDD.Core.Extensibility.CoreMetadataProvider.html": {
    "href": "doc/LightBDD.Core.Extensibility.CoreMetadataProvider.html",
    "title": "Class CoreMetadataProvider | docfx seed website",
    "keywords": "Class CoreMetadataProvider Metadata provider offering core implementation for providing feature, scenario and step metadata. Inheritance System.Object CoreMetadataProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public abstract class CoreMetadataProvider : IMetadataProvider Constructors CoreMetadataProvider(INameFormatter, StepTypeConfiguration, ICultureInfoProvider) Constructor. Declaration protected CoreMetadataProvider(INameFormatter nameFormatter, StepTypeConfiguration stepTypeConfiguration, ICultureInfoProvider cultureInfoProvider) Parameters Type Name Description INameFormatter nameFormatter object used to format names. StepTypeConfiguration stepTypeConfiguration object used in providing step metadata. ICultureInfoProvider cultureInfoProvider ICultureInfoProvider object used in providing step parameter formatters. Properties CultureInfoProvider Returns currently used ICultureInfoProvider instance. Declaration protected ICultureInfoProvider CultureInfoProvider { get; } Property Value Type Description ICultureInfoProvider NameFormatter Returns currently used instance. Declaration protected INameFormatter NameFormatter { get; } Property Value Type Description INameFormatter Methods CaptureCurrentScenario() Provides currently executed scenario details, that later can be used to build scenario metadata. This implementation uses CaptureCurrentScenarioMethod() to provide method information and always returns ScenarioDescriptor without parameters. Declaration public virtual ScenarioDescriptor CaptureCurrentScenario() Returns Type Description ScenarioDescriptor ScenarioDescriptor object. Implements IMetadataProvider.CaptureCurrentScenario() CaptureCurrentScenarioMethod() Provides currently executed scenario method. Declaration public abstract MethodBase CaptureCurrentScenarioMethod() Returns Type Description MethodBase describing currently executed scenario method. Implements IMetadataProvider.CaptureCurrentScenarioMethod() ExtractAttributePropertyValue<TAttribute>(MemberInfo, Func<TAttribute, String>) Provides value of attribute of type TAttribute applied on member or default if attribute is not applied. The attribute is searched in member and it's ancestors. Declaration protected static string ExtractAttributePropertyValue<TAttribute>(MemberInfo member, Func<TAttribute, string> valueExtractor) Parameters Type Name Description MemberInfo member Member to analyze for specified attribute. Func <TAttribute, System.String > valueExtractor Attribute value extraction method. Returns Type Description System.String Attribute value or default. Type Parameters Name Description TAttribute Type of attribute to extract. ExtractAttributePropertyValues<TAttribute>(MemberInfo, Func<TAttribute, String>) Provides values of all attributes of type TAttribute applied on member or empty collection if none are applied. The attribute is searched in member and it's ancestors. Declaration protected static IEnumerable<string> ExtractAttributePropertyValues<TAttribute>(MemberInfo member, Func<TAttribute, string> valueExtractor) Parameters Type Name Description MemberInfo member Member to analyze for specified attribute. Func <TAttribute, System.String > valueExtractor Attribute value extraction method. Returns Type Description IEnumerable < System.String > Values of all attributes or empty collection. Type Parameters Name Description TAttribute Type of attribute to extract. ExtractAttributes<TAttribute>(MemberInfo) Provides all attributes of type TAttribute applied on member or empty collection if none are applied. The attribute is searched in member and it's ancestors. Declaration protected static IEnumerable<TAttribute> ExtractAttributes<TAttribute>(MemberInfo member) Parameters Type Name Description MemberInfo member Member to analyze for specified attribute. Returns Type Description IEnumerable <TAttribute> All attributes or empty collection. Type Parameters Name Description TAttribute Type of attribute to extract. GetFeatureDescription(Type) Provides feature description which is determined from attribute implementing IFeatureDescriptionAttribute in first instance, then by GetImplementationSpecificFeatureDescription(Type) () method. Returns description or null if none is present. Declaration protected string GetFeatureDescription(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description System.String Feature description or null . GetFeatureInfo(Type) Provides object containing information about feature represented by featureType . The is determined from the featureType name. The are determined from attributes implementing ILabelAttribute , applied on featureType . The is determined from attribute implementing IFeatureDescriptionAttribute in first instance, then by GetImplementationSpecificFeatureDescription(Type) () method. The value may be null . Declaration public IFeatureInfo GetFeatureInfo(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description IFeatureInfo object. Implements IMetadataProvider.GetFeatureInfo(Type) GetFeatureLabels(Type) Provides labels from attributes implementing ILabelAttribute , applied on featureType , or empty array if none are present. Declaration protected string[] GetFeatureLabels(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description System.String [] Array of labels or empty array if none are present. GetFeatureName(Type) Provides feature name which is determined from name of featureType . Declaration protected INameInfo GetFeatureName(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description INameInfo Feature name. GetImplementationSpecificFeatureDescription(Type) Returns implementation specific feature description or null if such is not provided. Declaration protected abstract string GetImplementationSpecificFeatureDescription(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description System.String Feature description or null. GetImplementationSpecificScenarioCategories(MemberInfo) Returns implementation specific scenario categories or empty collection if no categories are provided. Declaration protected abstract IEnumerable<string> GetImplementationSpecificScenarioCategories(MemberInfo member) Parameters Type Name Description MemberInfo member Scenario method or feature test class to analyze. Returns Type Description IEnumerable < System.String > Scenario categories or empty collection. GetParameterFormatter(ParameterInfo) Provides step parameter formatter function for provided parameterInfo . If is applied on parameterInfo , it will be used to retrieve formatter function, otherwise the default one will be provided. The returned formatter function uses CultureInfoProvider to format parameters. Declaration public Func<object, string> GetParameterFormatter(ParameterInfo parameterInfo) Parameters Type Name Description ParameterInfo parameterInfo object describing step or scenario method parameter. Returns Type Description Func < System.Object , System.String > Formatter function. Implements IMetadataProvider.GetParameterFormatter(ParameterInfo) GetScenarioCategories(MethodBase) Provides scenario categories for scenario represented by scenarioMethod . The categories are determined from attributes implementing IScenarioCategoryAttribute , applied on scenarioMethod and type declaring the method, as well as from GetImplementationSpecificScenarioCategories(MemberInfo) () executed on scenarioMethod and type declaring the method. The categories specified on base classes will also be retrieved. Declaration public string[] GetScenarioCategories(MethodBase scenarioMethod) Parameters Type Name Description MethodBase scenarioMethod Scenario method. Returns Type Description System.String [] Scenario categories. Implements IMetadataProvider.GetScenarioCategories(MethodBase) GetScenarioLabels(MethodBase) Provides scenario labels for scenario represented by scenarioMethod which are determined from attributes implementing ILabelAttribute , applied on the method. Declaration public string[] GetScenarioLabels(MethodBase scenarioMethod) Parameters Type Name Description MethodBase scenarioMethod Scenario method. Returns Type Description System.String [] Scenario labels. Implements IMetadataProvider.GetScenarioLabels(MethodBase) GetScenarioName(ScenarioDescriptor) Provides object containing information about scenario name represented by scenarioDescriptor . Declaration public INameInfo GetScenarioName(ScenarioDescriptor scenarioDescriptor) Parameters Type Name Description ScenarioDescriptor scenarioDescriptor Scenario descriptor. Returns Type Description INameInfo object. Implements IMetadataProvider.GetScenarioName(ScenarioDescriptor) GetScenarioName(MethodBase) Provides object containing information about scenario name represented by scenarioMethod . The name is based on provided method name. The current implementation ignores scenario parameters, always constructing object with empty collection. Declaration public INameInfo GetScenarioName(MethodBase scenarioMethod) Parameters Type Name Description MethodBase scenarioMethod Scenario method. Returns Type Description INameInfo object. Implements IMetadataProvider.GetScenarioName(MethodBase) GetStepName(StepDescriptor, String) Provides object containing information about step name represented by stepDescriptor . The previousStepTypeName represents the step type name of previous step. The is determined from value PredefinedStepType or parsed from RawName if former is null . When determined step type is the same as previousStepTypeName , it is being replaced with . See also: , . Declaration public IStepNameInfo GetStepName(StepDescriptor stepDescriptor, string previousStepTypeName) Parameters Type Name Description StepDescriptor stepDescriptor Step descriptor. System.String previousStepTypeName Step type name of previous step, or null if current step is first one. Returns Type Description IStepNameInfo object. Implements IMetadataProvider.GetStepName(StepDescriptor, String) GetStepParameterFormatter(ParameterInfo) Provides step parameter formatter function for provided parameterInfo . If is applied on parameterInfo , it will be used to retrieve formatter function, otherwise the default one will be provided. The returned formatter function uses CultureInfoProvider to format parameters. Declaration public Func<object, string> GetStepParameterFormatter(ParameterInfo parameterInfo) Parameters Type Name Description ParameterInfo parameterInfo object describing step or scenario method parameter. Returns Type Description Func < System.Object , System.String > Formatter function. Implements IMetadataProvider.GetStepParameterFormatter(ParameterInfo)"
  },
  "doc/LightBDD.Core.Extensibility.Execution.IScenarioExecutionExtension.html": {
    "href": "doc/LightBDD.Core.Extensibility.Execution.IScenarioExecutionExtension.html",
    "title": "Interface IScenarioExecutionExtension | docfx seed website",
    "keywords": "Interface IScenarioExecutionExtension Interface describing scenario execution extension that can be used by LightBDD to decorate scenario execution. Namespace :LightBDD.Core.Extensibility.Execution Assembly :cs.temp.dll.dll Syntax public interface IScenarioExecutionExtension Methods ExecuteAsync(IScenarioInfo, Func<Task>) Method allowing to decorate scenario invocation specified by scenarioInvocation . Declaration Task ExecuteAsync(IScenarioInfo scenario, Func<Task> scenarioInvocation) Parameters Type Name Description IScenarioInfo scenario Scenario that is being executed. Func < Task > scenarioInvocation Invocation that should be called in the method body. Returns Type Description Task Execution task."
  },
  "doc/LightBDD.Core.Extensibility.Execution.IStepExecutionExtension.html": {
    "href": "doc/LightBDD.Core.Extensibility.Execution.IStepExecutionExtension.html",
    "title": "Interface IStepExecutionExtension | docfx seed website",
    "keywords": "Interface IStepExecutionExtension Interface describing step execution extension that can be used by LightBDD to decorate step execution. Namespace :LightBDD.Core.Extensibility.Execution Assembly :cs.temp.dll.dll Syntax public interface IStepExecutionExtension Methods ExecuteAsync(IStep, Func<Task>) Method allowing to decorate step invocation specified by stepInvocation . Declaration Task ExecuteAsync(IStep step, Func<Task> stepInvocation) Parameters Type Name Description IStep step Step that is being executed. Func < Task > stepInvocation Invocation that should be called in the method body. Returns Type Description Task Execution task."
  },
  "doc/LightBDD.Core.Extensibility.FeatureRunnerRepository.html": {
    "href": "doc/LightBDD.Core.Extensibility.FeatureRunnerRepository.html",
    "title": "Class FeatureRunnerRepository | docfx seed website",
    "keywords": "Class FeatureRunnerRepository Abstract runner factory allowing to create IFeatureRunner instances and maintaining list of instantiated runners. This class should be used by projects integrating LightBDD with testing frameworks. Inheritance System.Object FeatureRunnerRepository Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public abstract class FeatureRunnerRepository Constructors FeatureRunnerRepository(IIntegrationContext) Constructor instantiating factory with specified integration context. Declaration protected FeatureRunnerRepository(IIntegrationContext integrationContext) Parameters Type Name Description IIntegrationContext integrationContext Integration context. FeatureRunnerRepository(IntegrationContext) Constructor instantiating factory with specified runner context. Declaration protected FeatureRunnerRepository(IntegrationContext integrationContext) Parameters Type Name Description IntegrationContext integrationContext Runner context. Properties AllRunners All currently instantiated runners. Declaration public IEnumerable<IFeatureRunner> AllRunners { get; } Property Value Type Description IEnumerable < IFeatureRunner > Methods GetRunnerFor(Type) Returns feature runner for specified feature type. If runner already exists for featureType , the existing instance is returned, otherwise a new instance is being created. Declaration public IFeatureRunner GetRunnerFor(Type featureType) Parameters Type Name Description Type featureType Type of class describing feature and holding list of scenario methods. Returns Type Description IFeatureRunner Feature runner."
  },
  "doc/LightBDD.Core.Extensibility.ICultureInfoProvider.html": {
    "href": "doc/LightBDD.Core.Extensibility.ICultureInfoProvider.html",
    "title": "Interface ICultureInfoProvider | docfx seed website",
    "keywords": "Interface ICultureInfoProvider Interface allowing to configure CultureInfo used in formatting text by LightBDD. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface ICultureInfoProvider Methods GetCultureInfo() Returns CultureInfo that should be used for text formatting. Declaration CultureInfo GetCultureInfo() Returns Type Description CultureInfo CultureInfo to use."
  },
  "doc/LightBDD.Core.Extensibility.IFeatureFixtureRunner.html": {
    "href": "doc/LightBDD.Core.Extensibility.IFeatureFixtureRunner.html",
    "title": "Interface IFeatureFixtureRunner | docfx seed website",
    "keywords": "Interface IFeatureFixtureRunner Interface allowing to define and execute scenarios in programmatic manner. The interface is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IFeatureFixtureRunner Methods NewScenario() Creates new scenario to execute. Declaration IScenarioRunner NewScenario() Returns Type Description IScenarioRunner Scenario runner instance."
  },
  "doc/LightBDD.Core.Extensibility.IFeatureRunner.html": {
    "href": "doc/LightBDD.Core.Extensibility.IFeatureRunner.html",
    "title": "Interface IFeatureRunner | docfx seed website",
    "keywords": "Interface IFeatureRunner The feature runner interface allowing to execute feature tests and collect execution results. The instances of this interface can be provided by FeatureRunnerRepository . It is expected that for given feature test class, one instance of IFeatureRunner is created, while each class instance will have dedicated instance of IFeatureFixtureRunner . Note for testing framework integration projects: The feature runner should be disposed after all scenarios execution. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IFeatureRunner : IDisposable Methods ForFixture(Object) Returns IFeatureFixtureRunner instance allowing to execute scenario tests on fixture object. Declaration IFeatureFixtureRunner ForFixture(object fixture) Parameters Type Name Description System.Object fixture Fixture object containing scenario tests to execute. Returns Type Description IFeatureFixtureRunner IFeatureFixtureRunner instance. GetFeatureResult() Returns current results of feature tests. Declaration IFeatureResult GetFeatureResult() Returns Type Description IFeatureResult"
  },
  "doc/LightBDD.Core.Extensibility.IScenarioCategoryAttribute.html": {
    "href": "doc/LightBDD.Core.Extensibility.IScenarioCategoryAttribute.html",
    "title": "Interface IScenarioCategoryAttribute | docfx seed website",
    "keywords": "Interface IScenarioCategoryAttribute Scenario category attribute interface that can be applied on scenario test method. May be used to associate scenarios with specific categories. It is possible to apply multiple categories on given scenario. If given implementation supports alternative category attributes, and both are applied on scenario method, all of them would be used. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IScenarioCategoryAttribute Properties Category Scenario category name. Declaration string Category { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Core.Extensibility.IScenarioRunner.html": {
    "href": "doc/LightBDD.Core.Extensibility.IScenarioRunner.html",
    "title": "Interface IScenarioRunner | docfx seed website",
    "keywords": "Interface IScenarioRunner IScenarioRunner interface allowing to programmatically construct scenario to execute. The interface is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IScenarioRunner Methods RunAsynchronously() Runs scenario asynchronously and returns task representing it. Before scenario is run, a validation is done if scenario is properly configured (i.e. name is defined and there is defined at least one step to execute). Declaration Task RunAsynchronously() Returns Type Description Task Scenario task. RunSynchronously() Runs scenario synchronously - guaranteeing that scenario and all steps will execute on the same, calling thread. Before scenario is run, a validation is done if scenario is properly configured (i.e. name is defined and there is defined at least one step to execute). It is expected that only such scenarios can run synchronously whose steps returns completed . If any step method returns pending task, an exception will be thrown. Declaration void RunSynchronously() WithCapturedScenarioDetails() Configures scenario details with values inferred by IMetadataProvider . Declaration IScenarioRunner WithCapturedScenarioDetails() Returns Type Description IScenarioRunner Self. WithCategories(String[]) Configures scenario with categories. Declaration IScenarioRunner WithCategories(string[] categories) Parameters Type Name Description System.String [] categories Categories to set. Returns Type Description IScenarioRunner Self. WithContext(Func<Object>) Configures scenario to be executed with context provided by contextProvider . Declaration IScenarioRunner WithContext(Func<object> contextProvider) Parameters Type Name Description Func < System.Object > contextProvider Context provider function. Returns Type Description IScenarioRunner Self. WithLabels(String[]) Configures scenario with labels. Declaration IScenarioRunner WithLabels(string[] labels) Parameters Type Name Description System.String [] labels Labels to set. Returns Type Description IScenarioRunner Self. WithName(String) Configures scenario with name. Declaration IScenarioRunner WithName(string name) Parameters Type Name Description System.String name Name to set. Returns Type Description IScenarioRunner Self. WithSteps(IEnumerable<StepDescriptor>) Configures steps to be executed with scenario. Declaration IScenarioRunner WithSteps(IEnumerable<StepDescriptor> steps) Parameters Type Name Description IEnumerable < StepDescriptor > steps Steps to execute. Returns Type Description IScenarioRunner Self."
  },
  "doc/LightBDD.Core.Formatting.INameFormatter.html": {
    "href": "doc/LightBDD.Core.Formatting.INameFormatter.html",
    "title": "Interface INameFormatter | docfx seed website",
    "keywords": "Interface INameFormatter Interface allowing to format name into readable text. Namespace :LightBDD.Core.Formatting Assembly :cs.temp.dll.dll Syntax public interface INameFormatter Methods FormatName(String) Formats provided name into readable text. Declaration string FormatName(string name) Parameters Type Name Description System.String name Name to format. Returns Type Description System.String Formatted name."
  },
  "doc/LightBDD.Core.Formatting.NameDecorators.INameDecorator.html": {
    "href": "doc/LightBDD.Core.Formatting.NameDecorators.INameDecorator.html",
    "title": "Interface INameDecorator | docfx seed website",
    "keywords": "Interface INameDecorator Interface allowing to decorate name. Namespace :LightBDD.Core.Formatting.NameDecorators Assembly :cs.temp.dll.dll Syntax public interface INameDecorator Methods DecorateNameFormat(String) Decorates name format. Declaration string DecorateNameFormat(string nameFormat) Parameters Type Name Description System.String nameFormat Name format to decorate. Returns Type Description System.String Decorated text. DecorateParameterValue(INameParameterInfo) Decorates provided parameter. Declaration string DecorateParameterValue(INameParameterInfo parameter) Parameters Type Name Description INameParameterInfo parameter Parameter to decorate. Returns Type Description System.String Decorated parameter text."
  },
  "doc/LightBDD.Core.Formatting.NameDecorators.html": {
    "href": "doc/LightBDD.Core.Formatting.NameDecorators.html",
    "title": "Namespace LightBDD.Core.Formatting.NameDecorators | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Formatting.NameDecorators Classes StepNameDecorators Class providing step name decorator instances. Interfaces INameDecorator Interface allowing to decorate name. IStepNameDecorator Interface decorating step name."
  },
  "doc/LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute.html": {
    "href": "doc/LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute.html",
    "title": "Class ParameterFormatterAttribute | docfx seed website",
    "keywords": "Class ParameterFormatterAttribute Parameter formatter attribute, allowing to define custom step parameter formatting method. Inheritance System.Object ParameterFormatterAttribute Namespace :LightBDD.Core.Formatting.Parameters Assembly :cs.temp.dll.dll Syntax public abstract class ParameterFormatterAttribute : Attribute Methods Format(CultureInfo, Object) Formats given parameter value using culture . Declaration public abstract string Format(CultureInfo culture, object parameter) Parameters Type Name Description CultureInfo culture Culture used in formatting. System.Object parameter Parameter to format. Returns Type Description System.String"
  },
  "doc/LightBDD.Core.Metadata.IStepNameInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.IStepNameInfo.html",
    "title": "Interface IStepNameInfo | docfx seed website",
    "keywords": "Interface IStepNameInfo Interface describing step name metadata. Inherited Members INameInfo.ToString() INameInfo.Format(INameDecorator) INameInfo.NameFormat INameInfo.Parameters Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface IStepNameInfo : INameInfo Properties StepTypeName Returns step type name (may be null). Declaration IStepTypeNameInfo StepTypeName { get; } Property Value Type Description IStepTypeNameInfo Methods Format(IStepNameDecorator) Formats step name using provided decorator. Declaration string Format(IStepNameDecorator decorator) Parameters Type Name Description IStepNameDecorator decorator Decorator. Returns Type Description System.String Formatted name."
  },
  "doc/LightBDD.Core.Metadata.IStepTypeNameInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.IStepTypeNameInfo.html",
    "title": "Interface IStepTypeNameInfo | docfx seed website",
    "keywords": "Interface IStepTypeNameInfo Interface describing step type name metadata. Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface IStepTypeNameInfo Properties Name Returns normalized step type name. If consecutive steps are of the same type (like: GIVEN, GIVEN, GIVEN, WHEN, WHEN), the name of all except first one will be normalized with value of (producing steps like: GIVEN, AND, AND, WHEN, AND). Declaration string Name { get; } Property Value Type Description System.String OriginalName Returns original step type name (before normalization). Declaration string OriginalName { get; } Property Value Type Description System.String Methods ToString() Returns Name value. Declaration string ToString() Returns Type Description System.String"
  },
  "doc/LightBDD.Core.Reporting.FeatureReportGenerator.html": {
    "href": "doc/LightBDD.Core.Reporting.FeatureReportGenerator.html",
    "title": "Class FeatureReportGenerator | docfx seed website",
    "keywords": "Class FeatureReportGenerator Class allowing to generate and save reports for executed features. It supports multiple IReportWriter instances that can be specified in constructor. Inheritance System.Object FeatureReportGenerator Namespace :LightBDD.Core.Reporting Assembly :cs.temp.dll.dll Syntax public class FeatureReportGenerator : IFeatureAggregator Constructors FeatureReportGenerator(IReportWriter[]) Constructor configuring report generator with writers that would be used to write reports on generator disposal. Declaration public FeatureReportGenerator(params IReportWriter[] writers) Parameters Type Name Description IReportWriter [] writers Methods Aggregate(IFeatureResult) Aggregates given feature result. Declaration public void Aggregate(IFeatureResult featureResult) Parameters Type Name Description IFeatureResult featureResult Feature result to aggregate. Dispose() Writes all aggregated results and disposes the object. Declaration public void Dispose()"
  },
  "doc/LightBDD.Core.Reporting.IReportWriter.html": {
    "href": "doc/LightBDD.Core.Reporting.IReportWriter.html",
    "title": "Interface IReportWriter | docfx seed website",
    "keywords": "Interface IReportWriter Interface for feature result summary writers. Namespace :LightBDD.Core.Reporting Assembly :cs.temp.dll.dll Syntax public interface IReportWriter Methods Save(IFeatureResult[]) Saves feature results . Declaration void Save(params IFeatureResult[] results) Parameters Type Name Description IFeatureResult [] results Results to save."
  },
  "doc/LightBDD.Core.Reporting.html": {
    "href": "doc/LightBDD.Core.Reporting.html",
    "title": "Namespace LightBDD.Core.Reporting | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Reporting Classes FeatureReportGenerator Class allowing to generate and save reports for executed features. It supports multiple IReportWriter instances that can be specified in constructor. Interfaces IReportWriter Interface for feature result summary writers."
  },
  "doc/LightBDD.Core.Results.ExecutionStatus.html": {
    "href": "doc/LightBDD.Core.Results.ExecutionStatus.html",
    "title": "Enum ExecutionStatus | docfx seed website",
    "keywords": "Enum ExecutionStatus Represents status of test / scenario. Namespace :LightBDD.Core.Results Assembly :cs.temp.dll.dll Syntax public enum ExecutionStatus Fields Name Description Bypassed Bypassed Failed Failed Ignored Ignored / skipped NotRun Not run yet Passed Passed"
  },
  "doc/LightBDD.Core.Results.ExecutionTime.html": {
    "href": "doc/LightBDD.Core.Results.ExecutionTime.html",
    "title": "Class ExecutionTime | docfx seed website",
    "keywords": "Class ExecutionTime Class describing execution time. Inheritance System.Object ExecutionTime Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Results Assembly :cs.temp.dll.dll Syntax public class ExecutionTime Constructors ExecutionTime(DateTimeOffset, TimeSpan) Constructor. Declaration public ExecutionTime(DateTimeOffset start, TimeSpan duration) Parameters Type Name Description DateTimeOffset start Execution start. TimeSpan duration Execution duration. Properties Duration Returns execution duration. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan End Returns execution end. Declaration public DateTimeOffset End { get; } Property Value Type Description DateTimeOffset Start Returns execution start. Declaration public DateTimeOffset Start { get; } Property Value Type Description DateTimeOffset"
  },
  "doc/LightBDD.Core.Results.IFeatureResult.html": {
    "href": "doc/LightBDD.Core.Results.IFeatureResult.html",
    "title": "Interface IFeatureResult | docfx seed website",
    "keywords": "Interface IFeatureResult Interface describing feature test result. Namespace :LightBDD.Core.Results Assembly :cs.temp.dll.dll Syntax public interface IFeatureResult Properties Info Returns feature details. Declaration IFeatureInfo Info { get; } Property Value Type Description IFeatureInfo Methods GetScenarios() Returns results of scenarios executed within this feature. Declaration IEnumerable<IScenarioResult> GetScenarios() Returns Type Description IEnumerable < IScenarioResult > Collection of scenario results."
  },
  "doc/LightBDD.Framework.NoContext.html": {
    "href": "doc/LightBDD.Framework.NoContext.html",
    "title": "Class NoContext | docfx seed website",
    "keywords": "Class NoContext Class used to indicate that IBddRunner will execute scenarios without any additional context. Inheritance System.Object NoContext Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public sealed class NoContext"
  },
  "doc/LightBDD.Framework.Notification.Configuration.FeatureProgressNotifierConfiguration.html": {
    "href": "doc/LightBDD.Framework.Notification.Configuration.FeatureProgressNotifierConfiguration.html",
    "title": "Class FeatureProgressNotifierConfiguration | docfx seed website",
    "keywords": "Class FeatureProgressNotifierConfiguration Configuration class allowing to customize feature progress notification behavior. Inheritance System.Object FeatureProgressNotifierConfiguration Namespace :LightBDD.Framework.Notification.Configuration Assembly :cs.temp.dll.dll Syntax public class FeatureProgressNotifierConfiguration : FeatureConfiguration Properties Notifier Returns feature progress notifier. By default it is initialized with Default instance. Declaration public IFeatureProgressNotifier Notifier { get; } Property Value Type Description IFeatureProgressNotifier Methods UpdateNotifier(IFeatureProgressNotifier) Updates Notifier with new value. Declaration public FeatureProgressNotifierConfiguration UpdateNotifier(IFeatureProgressNotifier notifier) Parameters Type Name Description IFeatureProgressNotifier notifier New notifier to set. Returns Type Description FeatureProgressNotifierConfiguration Self."
  },
  "doc/LightBDD.Framework.Notification.Configuration.NotificationConfigurationExtensions.html": {
    "href": "doc/LightBDD.Framework.Notification.Configuration.NotificationConfigurationExtensions.html",
    "title": "Class NotificationConfigurationExtensions | docfx seed website",
    "keywords": "Class NotificationConfigurationExtensions Configuration class allowing to retrieve progress notification configurations for further customizations. See also: . Inheritance System.Object NotificationConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Notification.Configuration Assembly :cs.temp.dll.dll Syntax public static class NotificationConfigurationExtensions Methods FeatureProgressNotifierConfiguration(LightBddConfiguration) Retrieves FeatureProgressNotifierConfiguration(LightBddConfiguration) from configuration for further customizations. Declaration public static FeatureProgressNotifierConfiguration FeatureProgressNotifierConfiguration(this LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration object. Returns Type Description FeatureProgressNotifierConfiguration Configuration object. ScenarioProgressNotifierConfiguration(LightBddConfiguration) Retrieves ScenarioProgressNotifierConfiguration(LightBddConfiguration) from configuration for further customizations. Declaration public static ScenarioProgressNotifierConfiguration ScenarioProgressNotifierConfiguration(this LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration object. Returns Type Description ScenarioProgressNotifierConfiguration Configuration object."
  },
  "doc/LightBDD.Framework.Notification.Configuration.ScenarioProgressNotifierConfiguration.html": {
    "href": "doc/LightBDD.Framework.Notification.Configuration.ScenarioProgressNotifierConfiguration.html",
    "title": "Class ScenarioProgressNotifierConfiguration | docfx seed website",
    "keywords": "Class ScenarioProgressNotifierConfiguration Configuration class allowing to customize scenario progress notification behavior. Inheritance System.Object ScenarioProgressNotifierConfiguration Namespace :LightBDD.Framework.Notification.Configuration Assembly :cs.temp.dll.dll Syntax public class ScenarioProgressNotifierConfiguration : FeatureConfiguration Properties NotifierProvider Returns function providing scenario progress notifier, where function parameter is feature fixture class instance. By default it is initialized with function returning Default instance. Declaration public Func<object, IScenarioProgressNotifier> NotifierProvider { get; } Property Value Type Description Func < System.Object , IScenarioProgressNotifier > Methods UpdateNotifierProvider(Func<IScenarioProgressNotifier>) Updates NotifierProvider with new value. Declaration public ScenarioProgressNotifierConfiguration UpdateNotifierProvider(Func<IScenarioProgressNotifier> notifierProvider) Parameters Type Name Description Func < IScenarioProgressNotifier > notifierProvider New provider to set. Returns Type Description ScenarioProgressNotifierConfiguration Self. UpdateNotifierProvider<TFixture>(Func<TFixture, IScenarioProgressNotifier>) Updates NotifierProvider with new value. Declaration public ScenarioProgressNotifierConfiguration UpdateNotifierProvider<TFixture>(Func<TFixture, IScenarioProgressNotifier> notifierProvider) Parameters Type Name Description Func <TFixture, IScenarioProgressNotifier > notifierProvider New provider to set. Returns Type Description ScenarioProgressNotifierConfiguration Self. Type Parameters Name Description TFixture Feature fixture type."
  },
  "doc/LightBDD.Framework.Reporting.Configuration.ReportFileWriterConfigurationExtensions.html": {
    "href": "doc/LightBDD.Framework.Reporting.Configuration.ReportFileWriterConfigurationExtensions.html",
    "title": "Class ReportFileWriterConfigurationExtensions | docfx seed website",
    "keywords": "Class ReportFileWriterConfigurationExtensions Extension class for ReportWritersConfiguration simplifying configuration with ReportFileWriter instances. Inheritance System.Object ReportFileWriterConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting.Configuration Assembly :cs.temp.dll.dll Syntax public static class ReportFileWriterConfigurationExtensions Methods AddFileWriter<TFormatter>(ReportWritersConfiguration, String) Adds ReportFileWriter instance configured to format report with TFormatter and write it to outputPath . Declaration public static ReportWritersConfiguration AddFileWriter<TFormatter>(this ReportWritersConfiguration configuration, string outputPath)where TFormatter : IReportFormatter, new () Parameters Type Name Description ReportWritersConfiguration configuration Configuration. System.String outputPath Output path for the report. Returns Type Description ReportWritersConfiguration Configuration. Type Parameters Name Description TFormatter Type of report formatter."
  },
  "doc/LightBDD.Framework.Reporting.Configuration.ReportWritersConfiguration.html": {
    "href": "doc/LightBDD.Framework.Reporting.Configuration.ReportWritersConfiguration.html",
    "title": "Class ReportWritersConfiguration | docfx seed website",
    "keywords": "Class ReportWritersConfiguration Configuration class allowing to customize report writers. Inheritance System.Object ReportWritersConfiguration Namespace :LightBDD.Framework.Reporting.Configuration Assembly :cs.temp.dll.dll Syntax public class ReportWritersConfiguration : FeatureConfiguration, IEnumerable<IReportWriter> Constructors ReportWritersConfiguration() Default constructor initializing configuration to generate ~\\Reports\\FeaturesReport.xml and ~\\Reports\\FeaturesReport.html reports. Declaration public ReportWritersConfiguration() Methods Add(IReportWriter) Adds writer to report writers collection. Declaration public ReportWritersConfiguration Add(IReportWriter writer) Parameters Type Name Description IReportWriter writer Writer to add. Returns Type Description ReportWritersConfiguration Self. Clear() Removes all previously configured report writers. Declaration public ReportWritersConfiguration Clear() Returns Type Description ReportWritersConfiguration Self. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<IReportWriter> GetEnumerator() Returns Type Description IEnumerator < IReportWriter > An enumerator that can be used to iterate through the collection. Remove(IReportWriter) Removes specified, previously configured writer. Declaration public ReportWritersConfiguration Remove(IReportWriter writer) Parameters Type Name Description IReportWriter writer Writer instance to remove. Returns Type Description ReportWritersConfiguration Self."
  },
  "doc/LightBDD.Framework.Reporting.Configuration.html": {
    "href": "doc/LightBDD.Framework.Reporting.Configuration.html",
    "title": "Namespace LightBDD.Framework.Reporting.Configuration | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Reporting.Configuration Classes ReportConfigurationExtensions Configuration class allowing to retrieve report writers configurations for further customizations. See also: . ReportFileWriterConfigurationExtensions Extension class for ReportWritersConfiguration simplifying configuration with ReportFileWriter instances. ReportWritersConfiguration Configuration class allowing to customize report writers."
  },
  "doc/LightBDD.Framework.Reporting.ExecutionTimeSummary.html": {
    "href": "doc/LightBDD.Framework.Reporting.ExecutionTimeSummary.html",
    "title": "Class ExecutionTimeSummary | docfx seed website",
    "keywords": "Class ExecutionTimeSummary Class providing execution time summary. Inheritance System.Object ExecutionTimeSummary Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting Assembly :cs.temp.dll.dll Syntax public class ExecutionTimeSummary Constructors ExecutionTimeSummary() Default constructor initializing Start and End with and Average and Aggregated with . Declaration public ExecutionTimeSummary() ExecutionTimeSummary(DateTimeOffset, DateTimeOffset, TimeSpan, TimeSpan) Constructor allowing to setup all properties. Declaration public ExecutionTimeSummary(DateTimeOffset start, DateTimeOffset end, TimeSpan aggregated, TimeSpan average) Parameters Type Name Description DateTimeOffset start Start. DateTimeOffset end End. TimeSpan aggregated Aggregated. TimeSpan average Average. Properties Aggregated Returns aggregated execution duration. Declaration public TimeSpan Aggregated { get; } Property Value Type Description TimeSpan Average Returns average execution duration. Declaration public TimeSpan Average { get; } Property Value Type Description TimeSpan Duration Returns real execution duration (End - Start) Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan End Returns execution end. Declaration public DateTimeOffset End { get; } Property Value Type Description DateTimeOffset Start Returns execution start. Declaration public DateTimeOffset Start { get; } Property Value Type Description DateTimeOffset Methods Calculate(IEnumerable<ExecutionTime>) Calculates ExecutionTimeSummary for all instances provided in times argument. The Start is set to the lowest value from provided times . The End is set to the highest value from provided times . The Aggregated is set to the sum of all values from provided times . The Average is set to the Aggregated divided by number of values from provided times . Declaration public static ExecutionTimeSummary Calculate(IEnumerable<ExecutionTime> times) Parameters Type Name Description IEnumerable < ExecutionTime > times Times to calculate summary for. Returns Type Description ExecutionTimeSummary ExecutionTimeSummary object."
  },
  "doc/LightBDD.Framework.Reporting.ReportPathFormatter.html": {
    "href": "doc/LightBDD.Framework.Reporting.ReportPathFormatter.html",
    "title": "Class ReportPathFormatter | docfx seed website",
    "keywords": "Class ReportPathFormatter Summary file path formatter allowing to specify formattable paths with parameters like current date/time or time when test were executed. Formatter accepts string.Format() like parameters of {name:format} syntax, where name is a parameter name while format is string.Format() parameter format string (it is always required). Inheritance System.Object ReportPathFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting Assembly :cs.temp.dll.dll Syntax public class ReportPathFormatter Methods Add(String, Func<IFeatureResult[], Object>) Adds new format parameter. Declaration public ReportPathFormatter Add(string name, Func<IFeatureResult[], object> parameterFunction) Parameters Type Name Description System.String name Parameter name Func < IFeatureResult [], System.Object > parameterFunction Parameter function Returns Type Description ReportPathFormatter Parameter object. CreateDefault() Creates default ReportPathFormatter that supports following format parameters: CurrentDateTimeUtc - equivalent to DateTime.UtcNow (DateTime type) CurrentDateTime - equivalent to DateTime.Now (DateTime type) TestDateTimeUtc - utc date/time when test execution started (DateTime type) TestDateTime - local date/time when test execution started (DateTime type) Declaration public static ReportPathFormatter CreateDefault() Returns Type Description ReportPathFormatter ToFormattablePath(String) Converts formattablePath to ReportFormattablePath by: parameterizing path with configured parameter functions, replacing starting '~' character with value of AppContext.BaseDirectory , if present, resolving to full path if path is relative. Declaration public ReportFormattablePath ToFormattablePath(string formattablePath) Parameters Type Name Description System.String formattablePath Formattable path string Returns Type Description ReportFormattablePath Formattable path."
  },
  "doc/LightBDD.Framework.Reporting.html": {
    "href": "doc/LightBDD.Framework.Reporting.html",
    "title": "Namespace LightBDD.Framework.Reporting | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Reporting Classes ExecutionTimeSummary Class providing execution time summary. FeatureReportExtensions Helper methods to work on feature results ReportFileWriter Summary file writer class allows to save feature results by using associated result formatter and output path. ReportFormattablePath Report file formattable path. ReportPathFormatter Summary file path formatter allowing to specify formattable paths with parameters like current date/time or time when test were executed. Formatter accepts string.Format() like parameters of {name:format} syntax, where name is a parameter name while format is string.Format() parameter format string (it is always required)."
  },
  "doc/LightBDD.Framework.ScenarioCategoryAttribute.html": {
    "href": "doc/LightBDD.Framework.ScenarioCategoryAttribute.html",
    "title": "Class ScenarioCategoryAttribute | docfx seed website",
    "keywords": "Class ScenarioCategoryAttribute Scenario category attribute that can be applied on scenario test method. May be used to associate scenarios with specific categories. It is possible to apply multiple ScenarioCategory attributes on given scenario. If given implementation supports alternative category attributes, and both are applied on scenario method, all of them would be used. Inheritance System.Object ScenarioCategoryAttribute Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public class ScenarioCategoryAttribute : Attribute, IScenarioCategoryAttribute Constructors ScenarioCategoryAttribute(String) Constructor accepting category name. Declaration public ScenarioCategoryAttribute(string name) Parameters Type Name Description System.String name Properties Category Scenario category name. Declaration public string Category { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Framework.Scenarios.Basic.BasicScenarioExtensions.html": {
    "href": "doc/LightBDD.Framework.Scenarios.Basic.BasicScenarioExtensions.html",
    "title": "Class BasicScenarioExtensions | docfx seed website",
    "keywords": "Class BasicScenarioExtensions Extensions class allowing to use basic scenario syntax for running LightBDD tests. Inheritance System.Object BasicScenarioExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Scenarios.Basic Assembly :cs.temp.dll.dll Syntax public static class BasicScenarioExtensions Methods RunScenario(IBddRunner, Action[]) Runs test scenario by executing given steps in specified order. If given step throws, other are not executed. Scenario name is determined from the method name in which RunScenario(IBddRunner, Action[]) () method is called. Scenario labels are determined from LabelAttribute attributes applied on scenario method. Step name is determined from corresponding action name. Example usage: [Scenario] [Label(\"Ticket-1\")] public void Successful_login() { Runner.RunScenario( Given_the_user_is_about_to_login, Given_the_user_entered_valid_login, Given_the_user_entered_valid_password, When_the_user_clicks_login_button, Then_the_login_operation_should_be_successful, Then_a_welcome_message_containing_user_name_should_be_returned); } Expected step signature: void Given_the_user_is_about_to_login() { /* ... */ } Declaration public static void RunScenario(this IBddRunner runner, params Action[] steps) Parameters Type Name Description IBddRunner runner Runner. Action [] steps List of steps to execute in order. RunScenarioActionsAsync(IBddRunner, Action[]) Runs test scenario by executing given steps in specified order. If given step throws, other are not executed. Scenario name is determined from the method name in which RunScenarioActionsAsync(IBddRunner, Action[]) () method is called. Scenario labels are determined from LabelAttribute attributes applied on scenario method. Step name is determined from corresponding action name. Example usage: [Scenario] [Label(\"Ticket-1\")] public Task Successful_login() { return Runner.RunScenarioActionsAsync( Given_the_user_is_about_to_login, Given_the_user_entered_valid_login, Given_the_user_entered_valid_password, When_the_user_clicks_login_button, Then_the_login_operation_should_be_successful, Then_a_welcome_message_containing_user_name_should_be_returned); } Expected step signature: async void Given_the_user_is_about_to_login() { /* ... */ } or void Given_the_user_is_about_to_login() { /* ... */ } Declaration public static Task RunScenarioActionsAsync(this IBddRunner runner, params Action[] steps) Parameters Type Name Description IBddRunner runner Runner. Action [] steps List of steps to execute in order. Returns Type Description Task RunScenarioAsync(IBddRunner, Func<Task>[]) Runs test scenario by executing given steps in specified order. If given step throws, other are not executed. Scenario name is determined from the method name in which RunScenarioAsync(IBddRunner, Func<Task>[]) () method is called. Scenario labels are determined from LabelAttribute attributes applied on scenario method. Step name is determined from corresponding action name. Example usage: [Scenario] [Label(\"Ticket-1\")] public Task Successful_login() { return Runner.RunScenarioAsync( Given_the_user_is_about_to_login, Given_the_user_entered_valid_login, Given_the_user_entered_valid_password, When_the_user_clicks_login_button, Then_the_login_operation_should_be_successful, Then_a_welcome_message_containing_user_name_should_be_returned); } Expected step signature: async Task Given_the_user_is_about_to_login() { /* ... */ } Declaration public static Task RunScenarioAsync(this IBddRunner runner, params Func<Task>[] steps) Parameters Type Name Description IBddRunner runner Runner. Func < Task >[] steps List of steps to execute in order. Returns Type Description Task"
  },
  "doc/LightBDD.MsTest2.FeatureFixtureAttribute.html": {
    "href": "doc/LightBDD.MsTest2.FeatureFixtureAttribute.html",
    "title": "Class FeatureFixtureAttribute | docfx seed website",
    "keywords": "Class FeatureFixtureAttribute Attribute that should be applied to all test classes representing feature tests. It should be used for running LightBDD tests with MSTest testing framework. Inheritance System.Object FeatureFixtureAttribute Namespace :LightBDD.MsTest2 Assembly :cs.temp.dll.dll Syntax public class FeatureFixtureAttribute : TestClassAttribute"
  },
  "doc/LightBDD.MsTest2.FeatureRunnerProvider.html": {
    "href": "doc/LightBDD.MsTest2.FeatureRunnerProvider.html",
    "title": "Class FeatureRunnerProvider | docfx seed website",
    "keywords": "Class FeatureRunnerProvider Class allowing to instantiate that is being configured to work with MsTest framework. Inheritance System.Object FeatureRunnerProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.MsTest2 Assembly :cs.temp.dll.dll Syntax public static class FeatureRunnerProvider Methods GetRunnerFor(Type) Returns for given featureType . Declaration public static IFeatureRunner GetRunnerFor(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description IFeatureRunner object."
  },
  "doc/LightBDD.MsTest2.LightBddScope.html": {
    "href": "doc/LightBDD.MsTest2.LightBddScope.html",
    "title": "Class LightBddScope | docfx seed website",
    "keywords": "Class LightBddScope LightBddScope class allowing to initialize and finalize LightBDD in MsTest framework. Example showing how to initialize LightBDD in MsTest framework: [TestClass] class LightBddIntegration { [AssemblyInitialize] public static void Setup(TestContext testContext){ LightBddScope.Initialize(); } [AssemblyCleanup] public static void Cleanup(){ LightBddScope.Cleanup(); } } Inheritance System.Object LightBddScope Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.MsTest2 Assembly :cs.temp.dll.dll Syntax public static class LightBddScope Methods Cleanup() Finalizes LightBddScope. It should be called after all tests have finished. Declaration public static void Cleanup() Initialize() Initializes LightBddScope with default configuration. Declaration public static void Initialize() Initialize(Action<LightBddConfiguration>) Initializes LightBddScope with configuration customized with onConfigure action. Declaration public static void Initialize(Action<LightBddConfiguration> onConfigure) Parameters Type Name Description Action < LightBddConfiguration > onConfigure Action allowing to customize LightBDD configuration."
  },
  "doc/LightBDD.MsTest2.ScenarioAttribute.html": {
    "href": "doc/LightBDD.MsTest2.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | docfx seed website",
    "keywords": "Class ScenarioAttribute Scenario attribute that should be used for MsTest framework tests, as a replacement for [TestMethod] attribute. The ScenarioAttribute represents scenario test method. Inheritance System.Object ScenarioAttribute Namespace :LightBDD.MsTest2 Assembly :cs.temp.dll.dll Syntax public class ScenarioAttribute : TestMethodAttribute Methods Execute(ITestMethod) Performs scenario test. Declaration public override TestResult[] Execute(ITestMethod testMethod) Parameters Type Name Description ITestMethod testMethod TestMethod for execution. Returns Type Description TestResult [] Test Results."
  },
  "doc/LightBDD.Core.Configuration.ConfigurationExtensions.html": {
    "href": "doc/LightBDD.Core.Configuration.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions | docfx seed website",
    "keywords": "Class ConfigurationExtensions Extension class allowing to configure core parts of LightBDD. Inheritance System.Object ConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public static class ConfigurationExtensions Methods CultureInfoProviderConfiguration(LightBddConfiguration) Returns culture info provider configuration. Declaration public static CultureInfoProviderConfiguration CultureInfoProviderConfiguration(this LightBddConfiguration cfg) Parameters Type Name Description LightBddConfiguration cfg Configuration object. Returns Type Description CultureInfoProviderConfiguration Culture info provider configuration. ExecutionExtensionsConfiguration(LightBddConfiguration) Return execution extensions configuration. Declaration public static ExecutionExtensionsConfiguration ExecutionExtensionsConfiguration(this LightBddConfiguration cfg) Parameters Type Name Description LightBddConfiguration cfg Configuration object. Returns Type Description ExecutionExtensionsConfiguration Execution extensions configuration. StepTypeConfiguration(LightBddConfiguration) Returns step type configuration. Declaration public static StepTypeConfiguration StepTypeConfiguration(this LightBddConfiguration cfg) Parameters Type Name Description LightBddConfiguration cfg Configuration object. Returns Type Description StepTypeConfiguration Step type configuration."
  },
  "doc/LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.html",
    "title": "Class ExecutionExtensionsConfiguration | docfx seed website",
    "keywords": "Class ExecutionExtensionsConfiguration Execution extensions configuration allowing to enable LightBDD extensions. Inheritance System.Object FeatureConfiguration ExecutionExtensionsConfiguration Inherited Members FeatureConfiguration.ISealableFeatureConfiguration.Seal() FeatureConfiguration.IsSealed FeatureConfiguration.ThrowIfSealed() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public class ExecutionExtensionsConfiguration : FeatureConfiguration, ISealableFeatureConfiguration, IFeatureConfiguration, IExecutionExtensions Properties ScenarioExecutionExtensions Collection of scenario execution extensions. Declaration public IEnumerable<IScenarioExecutionExtension> ScenarioExecutionExtensions { get; } Property Value Type Description IEnumerable < IScenarioExecutionExtension > StepExecutionExtensions Collection of step execution extensions. Declaration public IEnumerable<IStepExecutionExtension> StepExecutionExtensions { get; } Property Value Type Description IEnumerable < IStepExecutionExtension > Methods EnableScenarioExtension<TScenarioExecutionExtension>() Enables scenario execution extension of specified type. If extension is already enabled the method does nothing. Declaration public ExecutionExtensionsConfiguration EnableScenarioExtension<TScenarioExecutionExtension>()where TScenarioExecutionExtension : IScenarioExecutionExtension, new () Returns Type Description ExecutionExtensionsConfiguration Self. Type Parameters Name Description TScenarioExecutionExtension Extension type to enable. EnableScenarioExtension<TScenarioExecutionExtension>(Func<TScenarioExecutionExtension>) Enables scenario execution extension of specified type. If extension is already enabled the method does nothing. If extension is not enabled yet, the given factory parameter would be used to instantiate extension. Declaration public ExecutionExtensionsConfiguration EnableScenarioExtension<TScenarioExecutionExtension>(Func<TScenarioExecutionExtension> factory)where TScenarioExecutionExtension : IScenarioExecutionExtension Parameters Type Name Description Func <TScenarioExecutionExtension> factory Factory used to instantiate the extension. Returns Type Description ExecutionExtensionsConfiguration Self. Type Parameters Name Description TScenarioExecutionExtension Extension type to enable. EnableStepExtension<TStepExecutionExtension>() Enables scenario execution extension of specified type. If extension is already enabled the method does nothing. Declaration public ExecutionExtensionsConfiguration EnableStepExtension<TStepExecutionExtension>()where TStepExecutionExtension : IStepExecutionExtension, new () Returns Type Description ExecutionExtensionsConfiguration Self. Type Parameters Name Description TStepExecutionExtension Extension type to enable. EnableStepExtension<TStepExecutionExtension>(Func<TStepExecutionExtension>) Enables step execution extension of specified type. If extension is already enabled the method does nothing. If extension is not enabled yet, the given factory parameter would be used to instantiate extension. Declaration public ExecutionExtensionsConfiguration EnableStepExtension<TStepExecutionExtension>(Func<TStepExecutionExtension> factory)where TStepExecutionExtension : IStepExecutionExtension Parameters Type Name Description Func <TStepExecutionExtension> factory Factory used to instantiate the extension. Returns Type Description ExecutionExtensionsConfiguration Self. Type Parameters Name Description TStepExecutionExtension Extension type to enable."
  },
  "doc/LightBDD.Core.Configuration.IFeatureConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.IFeatureConfiguration.html",
    "title": "Interface IFeatureConfiguration | docfx seed website",
    "keywords": "Interface IFeatureConfiguration Marker interface specifying that class describes LightBDD feature configuration. Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public interface IFeatureConfiguration"
  },
  "doc/LightBDD.Core.Configuration.LightBddConfiguration.html": {
    "href": "doc/LightBDD.Core.Configuration.LightBddConfiguration.html",
    "title": "Class LightBddConfiguration | docfx seed website",
    "keywords": "Class LightBddConfiguration LightBDD feature configuration class allowing to configure and/or obtain LightBDD features configuration. Inheritance System.Object LightBddConfiguration Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Configuration Assembly :cs.temp.dll.dll Syntax public class LightBddConfiguration Properties IsSealed Returns true if configuration is sealed. Declaration public bool IsSealed { get; } Property Value Type Description System.Boolean Methods Get<TConfiguration>() Returns current feature configuration of requested type. If there was no configuration specified for given feature, the default configuration would be instantiated and returned for further customizations. Declaration public TConfiguration Get<TConfiguration>()where TConfiguration : IFeatureConfiguration, new () Returns Type Description TConfiguration Feature configuration instance. Type Parameters Name Description TConfiguration Feature configuration type. Seal() Seals configuration making it immutable. It calls Seal() () method on all configuration items that implements the ISealableFeatureConfiguration interface. Since this call, the Get<TConfiguration>() () method will return only sealed configuration (current, and future default one). Declaration public LightBddConfiguration Seal() Returns Type Description LightBddConfiguration Self."
  },
  "doc/LightBDD.Core.Configuration.html": {
    "href": "doc/LightBDD.Core.Configuration.html",
    "title": "Namespace LightBDD.Core.Configuration | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Configuration Classes ConfigurationExtensions Extension class allowing to configure core parts of LightBDD. CultureInfoProviderConfiguration Culture info provider configuration. ExecutionExtensionsConfiguration Execution extensions configuration allowing to enable LightBDD extensions. FeatureConfiguration A base class of FeatureConfiguration with sealed state detection. LightBddConfiguration LightBDD feature configuration class allowing to configure and/or obtain LightBDD features configuration. StepTypeConfiguration Step type configuration allowing to define step types recognized by LightBDD. Interfaces IFeatureConfiguration Marker interface specifying that class describes LightBDD feature configuration. ISealableFeatureConfiguration A LightBDD feature configuration that could be sealed, making it immutable."
  },
  "doc/LightBDD.Core.Execution.Coordination.IFeatureAggregator.html": {
    "href": "doc/LightBDD.Core.Execution.Coordination.IFeatureAggregator.html",
    "title": "Interface IFeatureAggregator | docfx seed website",
    "keywords": "Interface IFeatureAggregator Feature aggregator interface for collecting feature results. Namespace :LightBDD.Core.Execution.Coordination Assembly :cs.temp.dll.dll Syntax public interface IFeatureAggregator : IDisposable Methods Aggregate(IFeatureResult) Aggregates given feature result. Declaration void Aggregate(IFeatureResult featureResult) Parameters Type Name Description IFeatureResult featureResult Feature result to aggregate."
  },
  "doc/LightBDD.Core.Execution.IStep.html": {
    "href": "doc/LightBDD.Core.Execution.IStep.html",
    "title": "Interface IStep | docfx seed website",
    "keywords": "Interface IStep Interface describing current step, providing step information details and ability to comment it. Namespace :LightBDD.Core.Execution Assembly :cs.temp.dll.dll Syntax public interface IStep Properties Info Step information details. Declaration IStepInfo Info { get; } Property Value Type Description IStepInfo Methods Comment(String) Annotates step with comment. It is possible to comment step many times. Declaration void Comment(string comment) Parameters Type Name Description System.String comment Comment."
  },
  "doc/LightBDD.Core.Execution.html": {
    "href": "doc/LightBDD.Core.Execution.html",
    "title": "Namespace LightBDD.Core.Execution | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Execution Classes StepBypassException Step bypass exception used to mark step bypassed Interfaces IStep Interface describing current step, providing step information details and ability to comment it."
  },
  "doc/LightBDD.Core.Extensibility.DefaultCultureInfoProvider.html": {
    "href": "doc/LightBDD.Core.Extensibility.DefaultCultureInfoProvider.html",
    "title": "Class DefaultCultureInfoProvider | docfx seed website",
    "keywords": "Class DefaultCultureInfoProvider Default implementation of ICultureInfoProvider returning CultureInfo.InvariantCulture . Inheritance System.Object DefaultCultureInfoProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public class DefaultCultureInfoProvider : ICultureInfoProvider Methods GetCultureInfo() Returns CultureInfo.InvariantCulture that should be used for text formatting. Declaration public CultureInfo GetCultureInfo() Returns Type Description CultureInfo CultureInfo.InvariantCulture. Implements ICultureInfoProvider.GetCultureInfo()"
  },
  "doc/LightBDD.Core.Extensibility.Execution.IExecutionExtensions.html": {
    "href": "doc/LightBDD.Core.Extensibility.Execution.IExecutionExtensions.html",
    "title": "Interface IExecutionExtensions | docfx seed website",
    "keywords": "Interface IExecutionExtensions Interface specifying extensions that should be used by LightBDD. Namespace :LightBDD.Core.Extensibility.Execution Assembly :cs.temp.dll.dll Syntax public interface IExecutionExtensions Properties ScenarioExecutionExtensions Collection of scenario execution extensions. Declaration IEnumerable<IScenarioExecutionExtension> ScenarioExecutionExtensions { get; } Property Value Type Description IEnumerable < IScenarioExecutionExtension > StepExecutionExtensions Collection of step execution extensions. Declaration IEnumerable<IStepExecutionExtension> StepExecutionExtensions { get; } Property Value Type Description IEnumerable < IStepExecutionExtension >"
  },
  "doc/LightBDD.Core.Extensibility.Execution.html": {
    "href": "doc/LightBDD.Core.Extensibility.Execution.html",
    "title": "Namespace LightBDD.Core.Extensibility.Execution | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Extensibility.Execution Interfaces IExecutionExtensions Interface specifying extensions that should be used by LightBDD. IScenarioExecutionExtension Interface describing scenario execution extension that can be used by LightBDD to decorate scenario execution. IStepExecutionExtension Interface describing step execution extension that can be used by LightBDD to decorate step execution."
  },
  "doc/LightBDD.Core.Extensibility.FeatureFixtureRunnerExtensions.html": {
    "href": "doc/LightBDD.Core.Extensibility.FeatureFixtureRunnerExtensions.html",
    "title": "Class FeatureFixtureRunnerExtensions | docfx seed website",
    "keywords": "Class FeatureFixtureRunnerExtensions IFeatureFixtureRunner extensions. Inheritance System.Object FeatureFixtureRunnerExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public static class FeatureFixtureRunnerExtensions Methods AsEnrichable(IFeatureFixtureRunner) Converts to IEnrichableFeatureFixtureRunner . Declaration public static IEnrichableFeatureFixtureRunner AsEnrichable(this IFeatureFixtureRunner runner) Parameters Type Name Description IFeatureFixtureRunner runner Runner. Returns Type Description IEnrichableFeatureFixtureRunner IEnrichableFeatureFixtureRunner instance."
  },
  "doc/LightBDD.Core.Extensibility.IEnrichableFeatureFixtureRunner.html": {
    "href": "doc/LightBDD.Core.Extensibility.IEnrichableFeatureFixtureRunner.html",
    "title": "Interface IEnrichableFeatureFixtureRunner | docfx seed website",
    "keywords": "Interface IEnrichableFeatureFixtureRunner Interface extending IFeatureFixtureRunner , offering method to enrich runner by providing IntegrationContext . Inherited Members IFeatureFixtureRunner.NewScenario() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IEnrichableFeatureFixtureRunner : IFeatureFixtureRunner Methods Enrich<TEnrichedRunner>(Func<IFeatureFixtureRunner, IntegrationContext, TEnrichedRunner>) Creates enriched runner based on IFeatureFixtureRunner and IntegrationContext . Declaration TEnrichedRunner Enrich<TEnrichedRunner>(Func<IFeatureFixtureRunner, IntegrationContext, TEnrichedRunner> runnerFactory) Parameters Type Name Description Func < IFeatureFixtureRunner , IntegrationContext , TEnrichedRunner> runnerFactory Runner factory. Returns Type Description TEnrichedRunner Type Parameters Name Description TEnrichedRunner Type of enriched runner."
  },
  "doc/LightBDD.Core.Extensibility.IFeatureDescriptionAttribute.html": {
    "href": "doc/LightBDD.Core.Extensibility.IFeatureDescriptionAttribute.html",
    "title": "Interface IFeatureDescriptionAttribute | docfx seed website",
    "keywords": "Interface IFeatureDescriptionAttribute Feature description attribute interface that can be applied on feature test class. May be used to enrich feature class with description like \"In order to... As a... I want to...\" or similar, that would be used by progress notifier and would be included in summary. If given implementation supports alternative description attributes, and both are applied on class, this one would be used. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IFeatureDescriptionAttribute Properties Description Feature description. Declaration string Description { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Core.Extensibility.IIntegrationContext.html": {
    "href": "doc/LightBDD.Core.Extensibility.IIntegrationContext.html",
    "title": "Interface IIntegrationContext | docfx seed website",
    "keywords": "Interface IIntegrationContext Interface describing integration context provided by projects integrating with test frameworks. The integration context is used to configure runners and used during scenario execution. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IIntegrationContext Properties ExceptionToStatusMapper Returns exception to status mapping method. Declaration Func<Exception, ExecutionStatus> ExceptionToStatusMapper { get; } Property Value Type Description Func < Exception , ExecutionStatus > ExecutionExtensions Returns LightBDD execution extensions. Declaration IExecutionExtensions ExecutionExtensions { get; } Property Value Type Description IExecutionExtensions FeatureProgressNotifier Returns feature progress notifier. Declaration IFeatureProgressNotifier FeatureProgressNotifier { get; } Property Value Type Description IFeatureProgressNotifier MetadataProvider Returns metadata provider. Declaration IMetadataProvider MetadataProvider { get; } Property Value Type Description IMetadataProvider NameFormatter Returns name formatter. Declaration INameFormatter NameFormatter { get; } Property Value Type Description INameFormatter ScenarioProgressNotifierProvider Returns scenario progress notifier provider method. Declaration Func<object, IScenarioProgressNotifier> ScenarioProgressNotifierProvider { get; } Property Value Type Description Func < System.Object , IScenarioProgressNotifier >"
  },
  "doc/LightBDD.Core.Extensibility.ILabelAttribute.html": {
    "href": "doc/LightBDD.Core.Extensibility.ILabelAttribute.html",
    "title": "Interface ILabelAttribute | docfx seed website",
    "keywords": "Interface ILabelAttribute Label attribute interface that can be applied on feature test class or scenario method. May be used to link feature/scenario with external tools by storing ticket number. Multiple labels per item are supported. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface ILabelAttribute Properties Label Specified label. Declaration string Label { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Core.Extensibility.IMetadataProvider.html": {
    "href": "doc/LightBDD.Core.Extensibility.IMetadataProvider.html",
    "title": "Interface IMetadataProvider | docfx seed website",
    "keywords": "Interface IMetadataProvider Test metadata provider interface allowing to provide feature, scenario and step metadata. Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public interface IMetadataProvider Methods CaptureCurrentScenario() Provides currently executed scenario details, that later can be used to build scenario metadata. Declaration ScenarioDescriptor CaptureCurrentScenario() Returns Type Description ScenarioDescriptor ScenarioDescriptor object. CaptureCurrentScenarioMethod() Provides currently executed scenario method. Declaration MethodBase CaptureCurrentScenarioMethod() Returns Type Description MethodBase describing currently executed scenario method. GetFeatureInfo(Type) Provides object containing information about feature represented by featureType . Declaration IFeatureInfo GetFeatureInfo(Type featureType) Parameters Type Name Description Type featureType Feature type. Returns Type Description IFeatureInfo object. GetParameterFormatter(ParameterInfo) Provides parameter formatter function for provided parameterInfo . Declaration Func<object, string> GetParameterFormatter(ParameterInfo parameterInfo) Parameters Type Name Description ParameterInfo parameterInfo object describing step or scenario method parameter. Returns Type Description Func < System.Object , System.String > Formatter function. GetScenarioCategories(MethodBase) Provides scenario categories for scenario represented by scenarioMethod . Declaration string[] GetScenarioCategories(MethodBase scenarioMethod) Parameters Type Name Description MethodBase scenarioMethod Scenario method. Returns Type Description System.String [] Scenario categories. GetScenarioLabels(MethodBase) Provides scenario labels for scenario represented by scenarioMethod . Declaration string[] GetScenarioLabels(MethodBase scenarioMethod) Parameters Type Name Description MethodBase scenarioMethod Scenario method. Returns Type Description System.String [] Scenario labels. GetScenarioName(ScenarioDescriptor) Provides object containing information about scenario name represented by scenarioDescriptor . Declaration INameInfo GetScenarioName(ScenarioDescriptor scenarioDescriptor) Parameters Type Name Description ScenarioDescriptor scenarioDescriptor Scenario descriptor. Returns Type Description INameInfo object. GetScenarioName(MethodBase) Provides object containing information about scenario name represented by scenarioMethod . Declaration INameInfo GetScenarioName(MethodBase scenarioMethod) Parameters Type Name Description MethodBase scenarioMethod Scenario method. Returns Type Description INameInfo object. GetStepName(StepDescriptor, String) Provides object containing information about step name represented by stepDescriptor . The previousStepTypeName represents the step type name of previous step. The is determined from PredefinedStepType or parsed from RawName if former is null . When determined step type is the same as previousStepTypeName , it is being replaced with . See also: , . Declaration IStepNameInfo GetStepName(StepDescriptor stepDescriptor, string previousStepTypeName) Parameters Type Name Description StepDescriptor stepDescriptor Step descriptor. System.String previousStepTypeName Step type name of previous step, or null if current step is first one. Returns Type Description IStepNameInfo object. GetStepParameterFormatter(ParameterInfo) Provides step parameter formatter function for provided parameterInfo . Declaration Func<object, string> GetStepParameterFormatter(ParameterInfo parameterInfo) Parameters Type Name Description ParameterInfo parameterInfo object describing step or scenario method parameter. Returns Type Description Func < System.Object , System.String > Formatter function."
  },
  "doc/LightBDD.Core.Extensibility.IntegrationContext.html": {
    "href": "doc/LightBDD.Core.Extensibility.IntegrationContext.html",
    "title": "Class IntegrationContext | docfx seed website",
    "keywords": "Class IntegrationContext A context offering integration objects used to configure runners. In comparison to IIntegrationContext , this class offers also Configuration property to retrieve configuration. Inheritance System.Object IntegrationContext Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public abstract class IntegrationContext : IIntegrationContext Properties Configuration Returns used to configure tests. It is expected that returned object will be sealed which means that it should be used only for reading configuration, but not altering it. Declaration public abstract LightBddConfiguration Configuration { get; } Property Value Type Description LightBddConfiguration ExceptionToStatusMapper Returns exception to status mapping method. Declaration public abstract Func<Exception, ExecutionStatus> ExceptionToStatusMapper { get; } Property Value Type Description Func < Exception , ExecutionStatus > Implements IIntegrationContext.ExceptionToStatusMapper ExecutionExtensions Returns LightBDD execution extensions. Declaration public abstract IExecutionExtensions ExecutionExtensions { get; } Property Value Type Description IExecutionExtensions Implements IIntegrationContext.ExecutionExtensions FeatureProgressNotifier Returns feature progress notifier. Declaration public abstract IFeatureProgressNotifier FeatureProgressNotifier { get; } Property Value Type Description IFeatureProgressNotifier Implements IIntegrationContext.FeatureProgressNotifier MetadataProvider Returns metadata provider. Declaration public abstract IMetadataProvider MetadataProvider { get; } Property Value Type Description IMetadataProvider Implements IIntegrationContext.MetadataProvider NameFormatter Returns name formatter. Declaration public abstract INameFormatter NameFormatter { get; } Property Value Type Description INameFormatter Implements IIntegrationContext.NameFormatter ScenarioProgressNotifierProvider Returns scenario progress notifier provider method. Declaration public abstract Func<object, IScenarioProgressNotifier> ScenarioProgressNotifierProvider { get; } Property Value Type Description Func < System.Object , IScenarioProgressNotifier > Implements IIntegrationContext.ScenarioProgressNotifierProvider"
  },
  "doc/LightBDD.Core.Extensibility.ParameterDescriptor.html": {
    "href": "doc/LightBDD.Core.Extensibility.ParameterDescriptor.html",
    "title": "Class ParameterDescriptor | docfx seed website",
    "keywords": "Class ParameterDescriptor Class describing scenario or step method parameter and offering a method to evaluate parameter value. Inheritance System.Object ParameterDescriptor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public class ParameterDescriptor Properties IsConstant Returns true if parameter is defined as constant with known value or false if parameter value has to be evaluated first in order to be known. Declaration public bool IsConstant { get; } Property Value Type Description System.Boolean ParameterInfo Returns ParameterInfo object describing this parameter. Declaration public ParameterInfo ParameterInfo { get; } Property Value Type Description ParameterInfo RawName Returns parameter raw name. Declaration public string RawName { get; } Property Value Type Description System.String ValueEvaluator Returns parameter value evaluator that would be used to evaluate parameter value during execution. The value evaluator function parameter represents scenario context object defined by WithContext(Func<Object>) () method. Declaration public Func<object, object> ValueEvaluator { get; } Property Value Type Description Func < System.Object , System.Object > Methods FromConstant(ParameterInfo, Object) Creates ParameterDescriptor object representing parameterInfo with constant value value . Declaration public static ParameterDescriptor FromConstant(ParameterInfo parameterInfo, object value) Parameters Type Name Description ParameterInfo parameterInfo ParameterInfo object describing parameter. System.Object value Constant value that would be bound to the parameter. Returns Type Description ParameterDescriptor FromInvocation(ParameterInfo, Func<Object, Object>) Creates ParameterDescriptor object representing parameterInfo with not-constant value provided by valueEvaluator . It is expected that valueEvaluator would be used once to evaluate parameter value, just before execution of method requiring this parameter value. Declaration public static ParameterDescriptor FromInvocation(ParameterInfo parameterInfo, Func<object, object> valueEvaluator) Parameters Type Name Description ParameterInfo parameterInfo ParameterInfo object describing parameter. Func < System.Object , System.Object > valueEvaluator Value evaluator function that should be used to retrieve parameter value. Returns Type Description ParameterDescriptor"
  },
  "doc/LightBDD.Core.Extensibility.ScenarioDescriptor.html": {
    "href": "doc/LightBDD.Core.Extensibility.ScenarioDescriptor.html",
    "title": "Class ScenarioDescriptor | docfx seed website",
    "keywords": "Class ScenarioDescriptor Class describing scenario including the scenario method info and parameters. It is designed to provide all required information for IMetadataProvider () method to build object. Inheritance System.Object ScenarioDescriptor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public class ScenarioDescriptor Constructors ScenarioDescriptor(MethodBase, Object[]) Constructor creating ScenarioDescriptor instance. Declaration public ScenarioDescriptor(MethodBase methodInfo, object[] arguments) Parameters Type Name Description MethodBase methodInfo Scenario method info. System.Object [] arguments Scenario arguments. If scenario arguments are not known (unable to obtain), the value of arguments should be null. Properties MethodInfo Returns scenario method. Declaration public MethodBase MethodInfo { get; } Property Value Type Description MethodBase Parameters Returns scenario method parameter descriptors or empty array if parameters are not known or method is parameterless. Declaration public ParameterDescriptor[] Parameters { get; } Property Value Type Description ParameterDescriptor []"
  },
  "doc/LightBDD.Core.Extensibility.StepDescriptor.html": {
    "href": "doc/LightBDD.Core.Extensibility.StepDescriptor.html",
    "title": "Class StepDescriptor | docfx seed website",
    "keywords": "Class StepDescriptor Class describing scenario step, including its metadata information as well invocation method together with parameters required to its execution. It is designed to provide all required information for GetStepName(StepDescriptor, String) () method to provide object. Inheritance System.Object StepDescriptor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Extensibility Assembly :cs.temp.dll.dll Syntax public class StepDescriptor Constructors StepDescriptor(String, Func<Object, Object[], Task>, ParameterDescriptor[]) Constructor allowing to specify name, step invocation function and step parameters. The PredefinedStepType is set to null . Declaration public StepDescriptor(string rawName, Func<object, object[], Task> stepInvocation, params ParameterDescriptor[] parameters) Parameters Type Name Description System.String rawName Step raw name. Func < System.Object , System.Object [], Task > stepInvocation Step invocation function. ParameterDescriptor [] parameters Step invocation function parameters. StepDescriptor(String, String, Func<Object, Object[], Task>, ParameterDescriptor[]) Constructor allowing to specify predefined step type, name, step invocation function and step parameters. Declaration public StepDescriptor(string predefinedStepType, string rawName, Func<object, object[], Task> stepInvocation, params ParameterDescriptor[] parameters) Parameters Type Name Description System.String predefinedStepType Predefined step type - it can be null . System.String rawName Step raw name. Func < System.Object , System.Object [], Task > stepInvocation Step invocation function. ParameterDescriptor [] parameters Step invocation function parameters. Properties Parameters Returns step parameter descriptors. Declaration public ParameterDescriptor[] Parameters { get; } Property Value Type Description ParameterDescriptor [] PredefinedStepType Returns predefined step type. Declaration public string PredefinedStepType { get; } Property Value Type Description System.String RawName Returns step raw name. Declaration public string RawName { get; } Property Value Type Description System.String StepInvocation Returns step invocation function accepting scenario context object configured with WithContext(Func<Object>) () method and step parameters. Declaration public Func<object, object[], Task> StepInvocation { get; } Property Value Type Description Func < System.Object , System.Object [], Task >"
  },
  "doc/LightBDD.Core.Extensibility.html": {
    "href": "doc/LightBDD.Core.Extensibility.html",
    "title": "Namespace LightBDD.Core.Extensibility | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Extensibility Classes CoreMetadataProvider Metadata provider offering core implementation for providing feature, scenario and step metadata. DefaultCultureInfoProvider Default implementation of ICultureInfoProvider returning CultureInfo.InvariantCulture . FeatureFixtureRunnerExtensions IFeatureFixtureRunner extensions. FeatureRunnerRepository Abstract runner factory allowing to create IFeatureRunner instances and maintaining list of instantiated runners. This class should be used by projects integrating LightBDD with testing frameworks. IntegrationContext A context offering integration objects used to configure runners. In comparison to IIntegrationContext , this class offers also Configuration property to retrieve configuration. ParameterDescriptor Class describing scenario or step method parameter and offering a method to evaluate parameter value. ScenarioDescriptor Class describing scenario including the scenario method info and parameters. It is designed to provide all required information for IMetadataProvider () method to build object. StepDescriptor Class describing scenario step, including its metadata information as well invocation method together with parameters required to its execution. It is designed to provide all required information for GetStepName(StepDescriptor, String) () method to provide object. Interfaces ICultureInfoProvider Interface allowing to configure CultureInfo used in formatting text by LightBDD. IEnrichableFeatureFixtureRunner Interface extending IFeatureFixtureRunner , offering method to enrich runner by providing IntegrationContext . IFeatureDescriptionAttribute Feature description attribute interface that can be applied on feature test class. May be used to enrich feature class with description like \"In order to... As a... I want to...\" or similar, that would be used by progress notifier and would be included in summary. If given implementation supports alternative description attributes, and both are applied on class, this one would be used. IFeatureFixtureRunner Interface allowing to define and execute scenarios in programmatic manner. The interface is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users. IFeatureRunner The feature runner interface allowing to execute feature tests and collect execution results. The instances of this interface can be provided by FeatureRunnerRepository . It is expected that for given feature test class, one instance of IFeatureRunner is created, while each class instance will have dedicated instance of IFeatureFixtureRunner . Note for testing framework integration projects: The feature runner should be disposed after all scenarios execution. IIntegrationContext Interface describing integration context provided by projects integrating with test frameworks. The integration context is used to configure runners and used during scenario execution. ILabelAttribute Label attribute interface that can be applied on feature test class or scenario method. May be used to link feature/scenario with external tools by storing ticket number. Multiple labels per item are supported. IMetadataProvider Test metadata provider interface allowing to provide feature, scenario and step metadata. IScenarioCategoryAttribute Scenario category attribute interface that can be applied on scenario test method. May be used to associate scenarios with specific categories. It is possible to apply multiple categories on given scenario. If given implementation supports alternative category attributes, and both are applied on scenario method, all of them would be used. IScenarioRunner IScenarioRunner interface allowing to programmatically construct scenario to execute. The interface is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users."
  },
  "doc/LightBDD.Core.Formatting.NameDecorators.IStepNameDecorator.html": {
    "href": "doc/LightBDD.Core.Formatting.NameDecorators.IStepNameDecorator.html",
    "title": "Interface IStepNameDecorator | docfx seed website",
    "keywords": "Interface IStepNameDecorator Interface decorating step name. Inherited Members INameDecorator.DecorateParameterValue(INameParameterInfo) INameDecorator.DecorateNameFormat(String) Namespace :LightBDD.Core.Formatting.NameDecorators Assembly :cs.temp.dll.dll Syntax public interface IStepNameDecorator : INameDecorator Methods DecorateStepTypeName(IStepTypeNameInfo) Decorates step type name. Declaration string DecorateStepTypeName(IStepTypeNameInfo stepTypeName) Parameters Type Name Description IStepTypeNameInfo stepTypeName Returns Type Description System.String"
  },
  "doc/LightBDD.Core.Formatting.NameDecorators.StepNameDecorators.html": {
    "href": "doc/LightBDD.Core.Formatting.NameDecorators.StepNameDecorators.html",
    "title": "Class StepNameDecorators | docfx seed website",
    "keywords": "Class StepNameDecorators Class providing step name decorator instances. Inheritance System.Object StepNameDecorators Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Formatting.NameDecorators Assembly :cs.temp.dll.dll Syntax public static class StepNameDecorators Fields Default Default step name decorator, where: step type is returned intact if not null, or string.Empty is returned, parameter value is returned intact if not null, or string.Empty is returned, name format is returned intact if not null, or string.Empty is returned. Declaration public static readonly IStepNameDecorator Default Field Value Type Description IStepNameDecorator"
  },
  "doc/LightBDD.Core.Formatting.Parameters.html": {
    "href": "doc/LightBDD.Core.Formatting.Parameters.html",
    "title": "Namespace LightBDD.Core.Formatting.Parameters | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Formatting.Parameters Classes ParameterFormatterAttribute Parameter formatter attribute, allowing to define custom step parameter formatting method."
  },
  "doc/LightBDD.Core.Formatting.TimeFormatter.html": {
    "href": "doc/LightBDD.Core.Formatting.TimeFormatter.html",
    "title": "Class TimeFormatter | docfx seed website",
    "keywords": "Class TimeFormatter Extension methods for formatting TimeSpan values. Inheritance System.Object TimeFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Core.Formatting Assembly :cs.temp.dll.dll Syntax public static class TimeFormatter Methods FormatPretty(Nullable<TimeSpan>) Formats given value if provided or returns empty string. This method returns up to 2 most meaningful time components of given time, to make it most readable. Maximal supported time component is 'day', while the minimal is 'millisecond'. TimeSpan value being less than 1ms but larger than 0 would be presented as <1ms. Example values: 1d 12h 5h 5m 02s 2s 527ms <1ms 0ms Declaration public static string FormatPretty(this TimeSpan? ts) Parameters Type Name Description System.Nullable < TimeSpan > ts Returns Type Description System.String FormatPretty(TimeSpan) This method returns up to 2 most meaningful time components of given time, to make it most readable. Maximal supported time component is 'day', while the minimal is 'millisecond'. TimeSpan value being less than 1ms but larger than 0 would be presented as <1ms. Example values: 1d 12h 5h 5m 02s 2s 527ms <1ms 0ms Declaration public static string FormatPretty(this TimeSpan ts) Parameters Type Name Description TimeSpan ts Returns Type Description System.String"
  },
  "doc/LightBDD.Core.Formatting.html": {
    "href": "doc/LightBDD.Core.Formatting.html",
    "title": "Namespace LightBDD.Core.Formatting | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Formatting Classes TimeFormatter Extension methods for formatting TimeSpan values. Interfaces INameFormatter Interface allowing to format name into readable text."
  },
  "doc/LightBDD.Core.Metadata.IFeatureInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.IFeatureInfo.html",
    "title": "Interface IFeatureInfo | docfx seed website",
    "keywords": "Interface IFeatureInfo Interface describing feature metadata. Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface IFeatureInfo Properties Description Returns feature description or null if none provided. Declaration string Description { get; } Property Value Type Description System.String Labels Returns feature labels or empty collection if none provided. Declaration IEnumerable<string> Labels { get; } Property Value Type Description IEnumerable < System.String > Name Returns feature name. Declaration INameInfo Name { get; } Property Value Type Description INameInfo"
  },
  "doc/LightBDD.Core.Metadata.INameInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.INameInfo.html",
    "title": "Interface INameInfo | docfx seed website",
    "keywords": "Interface INameInfo Interface describing name metadata. Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface INameInfo Properties NameFormat Returns name format. Declaration string NameFormat { get; } Property Value Type Description System.String Parameters Returns name parameters used in formatting or empty collection if name is not parameterized. Declaration IEnumerable<INameParameterInfo> Parameters { get; } Property Value Type Description IEnumerable < INameParameterInfo > Methods Format(INameDecorator) Formats name using provided decorator. Declaration string Format(INameDecorator decorator) Parameters Type Name Description INameDecorator decorator Decorator. Returns Type Description System.String Formatted name. ToString() Formats name using step name decorator. Declaration string ToString() Returns Type Description System.String Formatted name."
  },
  "doc/LightBDD.Core.Metadata.INameParameterInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.INameParameterInfo.html",
    "title": "Interface INameParameterInfo | docfx seed website",
    "keywords": "Interface INameParameterInfo Interface describing name parameter metadata. Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface INameParameterInfo Properties FormattedValue Returns formatted parameter value. Declaration string FormattedValue { get; } Property Value Type Description System.String IsEvaluated Returns true if parameter is already evaluated or false if not. Declaration bool IsEvaluated { get; } Property Value Type Description System.Boolean"
  },
  "doc/LightBDD.Core.Metadata.IScenarioInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.IScenarioInfo.html",
    "title": "Interface IScenarioInfo | docfx seed website",
    "keywords": "Interface IScenarioInfo Interface describing scenario metadata. Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface IScenarioInfo Properties Categories Returns scenario categories or empty collection if none specified. Declaration IEnumerable<string> Categories { get; } Property Value Type Description IEnumerable < System.String > Labels Returns scenario labels or empty collection if none specified. Declaration IEnumerable<string> Labels { get; } Property Value Type Description IEnumerable < System.String > Name Returns scenario name. Declaration INameInfo Name { get; } Property Value Type Description INameInfo"
  },
  "doc/LightBDD.Core.Metadata.IStepInfo.html": {
    "href": "doc/LightBDD.Core.Metadata.IStepInfo.html",
    "title": "Interface IStepInfo | docfx seed website",
    "keywords": "Interface IStepInfo Interface describing scenario step metadata. Namespace :LightBDD.Core.Metadata Assembly :cs.temp.dll.dll Syntax public interface IStepInfo Properties Name Returns step name. Declaration IStepNameInfo Name { get; } Property Value Type Description IStepNameInfo Number Returns step number in all steps belonging to scenario. Declaration int Number { get; } Property Value Type Description System.Int32 Total Returns total number of steps in scenario. Declaration int Total { get; } Property Value Type Description System.Int32"
  },
  "doc/LightBDD.Core.Metadata.html": {
    "href": "doc/LightBDD.Core.Metadata.html",
    "title": "Namespace LightBDD.Core.Metadata | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Metadata Interfaces IFeatureInfo Interface describing feature metadata. INameInfo Interface describing name metadata. INameParameterInfo Interface describing name parameter metadata. IScenarioInfo Interface describing scenario metadata. IStepInfo Interface describing scenario step metadata. IStepNameInfo Interface describing step name metadata. IStepTypeNameInfo Interface describing step type name metadata."
  },
  "doc/LightBDD.Core.Notification.IFeatureProgressNotifier.html": {
    "href": "doc/LightBDD.Core.Notification.IFeatureProgressNotifier.html",
    "title": "Interface IFeatureProgressNotifier | docfx seed website",
    "keywords": "Interface IFeatureProgressNotifier Feature progress notification interface. Namespace :LightBDD.Core.Notification Assembly :cs.temp.dll.dll Syntax public interface IFeatureProgressNotifier Methods NotifyFeatureFinished(IFeatureResult) Notifies that feature has finished. Declaration void NotifyFeatureFinished(IFeatureResult feature) Parameters Type Name Description IFeatureResult feature Feature result. NotifyFeatureStart(IFeatureInfo) Notifies that feature has started. Declaration void NotifyFeatureStart(IFeatureInfo feature) Parameters Type Name Description IFeatureInfo feature Feature info."
  },
  "doc/LightBDD.Core.Notification.IScenarioProgressNotifier.html": {
    "href": "doc/LightBDD.Core.Notification.IScenarioProgressNotifier.html",
    "title": "Interface IScenarioProgressNotifier | docfx seed website",
    "keywords": "Interface IScenarioProgressNotifier Scenario progress notification interface. Namespace :LightBDD.Core.Notification Assembly :cs.temp.dll.dll Syntax public interface IScenarioProgressNotifier Methods NotifyScenarioFinished(IScenarioResult) Notifies that scenario has finished. Declaration void NotifyScenarioFinished(IScenarioResult scenario) Parameters Type Name Description IScenarioResult scenario Scenario result. NotifyScenarioStart(IScenarioInfo) Notifies that scenario has started. Declaration void NotifyScenarioStart(IScenarioInfo scenario) Parameters Type Name Description IScenarioInfo scenario Scenario info. NotifyStepComment(IStepInfo, String) Notifies that step has been commented. Declaration void NotifyStepComment(IStepInfo step, string comment) Parameters Type Name Description IStepInfo step Step info. System.String comment Comment. NotifyStepFinished(IStepResult) Notifies that step has finished. Declaration void NotifyStepFinished(IStepResult step) Parameters Type Name Description IStepResult step Step result. NotifyStepStart(IStepInfo) Notifies that step has started. Declaration void NotifyStepStart(IStepInfo step) Parameters Type Name Description IStepInfo step Step info."
  },
  "doc/LightBDD.Core.Notification.html": {
    "href": "doc/LightBDD.Core.Notification.html",
    "title": "Namespace LightBDD.Core.Notification | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Notification Interfaces IFeatureProgressNotifier Feature progress notification interface. IScenarioProgressNotifier Scenario progress notification interface."
  },
  "doc/LightBDD.Core.Results.IScenarioResult.html": {
    "href": "doc/LightBDD.Core.Results.IScenarioResult.html",
    "title": "Interface IScenarioResult | docfx seed website",
    "keywords": "Interface IScenarioResult Interface describing scenario test result. Namespace :LightBDD.Core.Results Assembly :cs.temp.dll.dll Syntax public interface IScenarioResult Properties ExecutionTime Returns scenario execution time. Declaration ExecutionTime ExecutionTime { get; } Property Value Type Description ExecutionTime Info Returns scenario details. Declaration IScenarioInfo Info { get; } Property Value Type Description IScenarioInfo Status Returns scenario execution status. Declaration ExecutionStatus Status { get; } Property Value Type Description ExecutionStatus StatusDetails Returns status details. It will contain details for all bypassed, ignored or failed steps. It may be null if no additional details are provided. Declaration string StatusDetails { get; } Property Value Type Description System.String Methods GetSteps() Returns results of steps executed within this scenario. Declaration IEnumerable<IStepResult> GetSteps() Returns Type Description IEnumerable < IStepResult > Collection of step results."
  },
  "doc/LightBDD.Core.Results.IStepResult.html": {
    "href": "doc/LightBDD.Core.Results.IStepResult.html",
    "title": "Interface IStepResult | docfx seed website",
    "keywords": "Interface IStepResult Interface describing step test result. Namespace :LightBDD.Core.Results Assembly :cs.temp.dll.dll Syntax public interface IStepResult Properties Comments Returns step comments or empty collection if no comments were made. Declaration IEnumerable<string> Comments { get; } Property Value Type Description IEnumerable < System.String > ExecutionTime Returns step execution time. Declaration ExecutionTime ExecutionTime { get; } Property Value Type Description ExecutionTime Info Returns step details. Declaration IStepInfo Info { get; } Property Value Type Description IStepInfo Status Returns step execution status. Declaration ExecutionStatus Status { get; } Property Value Type Description ExecutionStatus StatusDetails Returns status details that contains reason for bypassed, ignored or failed steps. It may be null if no additional details are provided. Declaration string StatusDetails { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Core.Results.html": {
    "href": "doc/LightBDD.Core.Results.html",
    "title": "Namespace LightBDD.Core.Results | docfx seed website",
    "keywords": "Namespace LightBDD.Core.Results Classes ExecutionTime Class describing execution time. Interfaces IFeatureResult Interface describing feature test result. IScenarioResult Interface describing scenario test result. IStepResult Interface describing step test result. Enums ExecutionStatus Represents status of test / scenario."
  },
  "doc/LightBDD.Framework.Commenting.Configuration.CommentingConfigurationExtensions.html": {
    "href": "doc/LightBDD.Framework.Commenting.Configuration.CommentingConfigurationExtensions.html",
    "title": "Class CommentingConfigurationExtensions | docfx seed website",
    "keywords": "Class CommentingConfigurationExtensions Configuration class allowing to enable commenting feature in LightBDD. See also: . Inheritance System.Object CommentingConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Commenting.Configuration Assembly :cs.temp.dll.dll Syntax public static class CommentingConfigurationExtensions Methods EnableStepCommenting(ExecutionExtensionsConfiguration) Enables configuration feature in provided configuration object. As this feature depends on , it enables it as well with (). Declaration public static ExecutionExtensionsConfiguration EnableStepCommenting(this ExecutionExtensionsConfiguration configuration) Parameters Type Name Description ExecutionExtensionsConfiguration configuration Configuration object. Returns Type Description ExecutionExtensionsConfiguration Configuration object."
  },
  "doc/LightBDD.Framework.Commenting.Configuration.html": {
    "href": "doc/LightBDD.Framework.Commenting.Configuration.html",
    "title": "Namespace LightBDD.Framework.Commenting.Configuration | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Commenting.Configuration Classes CommentingConfigurationExtensions Configuration class allowing to enable commenting feature in LightBDD. See also: ."
  },
  "doc/LightBDD.Framework.Commenting.StepExecutionExtensions.html": {
    "href": "doc/LightBDD.Framework.Commenting.StepExecutionExtensions.html",
    "title": "Class StepExecutionExtensions | docfx seed website",
    "keywords": "Class StepExecutionExtensions Extension class for StepExecution allowing to comment currently running steps. Inheritance System.Object StepExecutionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Commenting Assembly :cs.temp.dll.dll Syntax public static class StepExecutionExtensions Methods Comment(StepExecution, String) Comments currently executed step with a comment text. The comment would be included in progress notification, as well as in execution reports. This feature has to be enabled in via () prior to usage. Declaration public static void Comment(this StepExecution execution, string comment) Parameters Type Name Description StepExecution execution Current step execution instance. System.String comment Comment to add. If comment is null or empty, it will not be added."
  },
  "doc/LightBDD.Framework.Commenting.html": {
    "href": "doc/LightBDD.Framework.Commenting.html",
    "title": "Namespace LightBDD.Framework.Commenting | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Commenting Classes StepExecutionExtensions Extension class for StepExecution allowing to comment currently running steps."
  },
  "doc/LightBDD.Framework.ExecutionContext.AsyncLocalContext-1.html": {
    "href": "doc/LightBDD.Framework.ExecutionContext.AsyncLocalContext-1.html",
    "title": "Class AsyncLocalContext<T> | docfx seed website",
    "keywords": "Class AsyncLocalContext<T> Class offering async local storage Inheritance System.Object AsyncLocalContext<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.ExecutionContext Assembly :cs.temp.dll.dll Syntax public class AsyncLocalContext<T> Type Parameters Name Description T Stored value Properties Value Allows to get and set value to store. Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "doc/LightBDD.Framework.ExecutionContext.Configuration.ScenarioExecutionContextConfigurationExtensions.html": {
    "href": "doc/LightBDD.Framework.ExecutionContext.Configuration.ScenarioExecutionContextConfigurationExtensions.html",
    "title": "Class ScenarioExecutionContextConfigurationExtensions | docfx seed website",
    "keywords": "Class ScenarioExecutionContextConfigurationExtensions Configuration class allowing to enable ScenarioExecutionContext feature in LightBDD. See also: . Inheritance System.Object ScenarioExecutionContextConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.ExecutionContext.Configuration Assembly :cs.temp.dll.dll Syntax public static class ScenarioExecutionContextConfigurationExtensions Methods EnableScenarioExecutionContext(ExecutionExtensionsConfiguration) Enables ScenarioExecutionContext feature in provided configuration object. Declaration public static ExecutionExtensionsConfiguration EnableScenarioExecutionContext(this ExecutionExtensionsConfiguration configuration) Parameters Type Name Description ExecutionExtensionsConfiguration configuration Configuration object. Returns Type Description ExecutionExtensionsConfiguration Configuration object."
  },
  "doc/LightBDD.Framework.ExecutionContext.Configuration.html": {
    "href": "doc/LightBDD.Framework.ExecutionContext.Configuration.html",
    "title": "Namespace LightBDD.Framework.ExecutionContext.Configuration | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.ExecutionContext.Configuration Classes ScenarioExecutionContextConfigurationExtensions Configuration class allowing to enable ScenarioExecutionContext feature in LightBDD. See also: ."
  },
  "doc/LightBDD.Framework.ExecutionContext.IContextProperty.html": {
    "href": "doc/LightBDD.Framework.ExecutionContext.IContextProperty.html",
    "title": "Interface IContextProperty | docfx seed website",
    "keywords": "Interface IContextProperty Marker interface describing execution context property. Namespace :LightBDD.Framework.ExecutionContext Assembly :cs.temp.dll.dll Syntax public interface IContextProperty"
  },
  "doc/LightBDD.Framework.ExecutionContext.ScenarioExecutionContext.html": {
    "href": "doc/LightBDD.Framework.ExecutionContext.ScenarioExecutionContext.html",
    "title": "Class ScenarioExecutionContext | docfx seed website",
    "keywords": "Class ScenarioExecutionContext Scenario execution context class allowing to store and retrieve scenario properties that would be available for all steps and tasks executed within the scenario. This feature has to be enabled in via () prior to usage. Inheritance System.Object ScenarioExecutionContext Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.ExecutionContext Assembly :cs.temp.dll.dll Syntax public sealed class ScenarioExecutionContext Properties Current Returns current scenario execution context. Throws when Current property is accessed from outside of scenario method or if ScenarioExecutionContext feature is not enabled. Declaration public static ScenarioExecutionContext Current { get; set; } Property Value Type Description ScenarioExecutionContext Methods Get<TProperty>() Provides property value of TProperty type that is stored in scenario context. If such property does not exists yet, a new instance will be registered in context and returned. Declaration public TProperty Get<TProperty>()where TProperty : IContextProperty, new () Returns Type Description TProperty Property object. Type Parameters Name Description TProperty Property type to retrieve."
  },
  "doc/LightBDD.Framework.ExecutionContext.html": {
    "href": "doc/LightBDD.Framework.ExecutionContext.html",
    "title": "Namespace LightBDD.Framework.ExecutionContext | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.ExecutionContext Classes AsyncLocalContext<T> Class offering async local storage ScenarioExecutionContext Scenario execution context class allowing to store and retrieve scenario properties that would be available for all steps and tasks executed within the scenario. This feature has to be enabled in via () prior to usage. Interfaces IContextProperty Marker interface describing execution context property."
  },
  "doc/LightBDD.Framework.Extensibility.BddRunnerExtensions.html": {
    "href": "doc/LightBDD.Framework.Extensibility.BddRunnerExtensions.html",
    "title": "Class BddRunnerExtensions | docfx seed website",
    "keywords": "Class BddRunnerExtensions IBddRunner extensions. Inheritance System.Object BddRunnerExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Extensibility Assembly :cs.temp.dll.dll Syntax public static class BddRunnerExtensions Methods GetBddRunner(IFeatureRunner, Object) Method allowing to retrieve the IBddRunner instance from . The IBddRunner is a main runner interface that should be used for executing LightBDD scenarios, while the interfaces coming from LightBDD.Core namespace should be used only in integration projects. Declaration public static IBddRunner GetBddRunner(this IFeatureRunner featureRunner, object fixture) Parameters Type Name Description IFeatureRunner featureRunner Instance of . System.Object fixture Feature fixture instance. Returns Type Description IBddRunner Integrate<TContext>(IBddRunner<TContext>) Method allowing to retrieve the instance allowing to define and execute scenarios. This method is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users. Declaration public static IFeatureFixtureRunner Integrate<TContext>(this IBddRunner<TContext> runner) Parameters Type Name Description IBddRunner <TContext> runner Bdd runner. Returns Type Description IFeatureFixtureRunner Instance of . Type Parameters Name Description TContext Bdd runner context type."
  },
  "doc/LightBDD.Framework.Extensibility.DefaultIntegrationContext.html": {
    "href": "doc/LightBDD.Framework.Extensibility.DefaultIntegrationContext.html",
    "title": "Class DefaultIntegrationContext | docfx seed website",
    "keywords": "Class DefaultIntegrationContext A default implementation of . Inheritance System.Object DefaultIntegrationContext Namespace :LightBDD.Framework.Extensibility Assembly :cs.temp.dll.dll Syntax public class DefaultIntegrationContext : IntegrationContext Constructors DefaultIntegrationContext(LightBddConfiguration, IMetadataProvider, Func<Exception, ExecutionStatus>) Default constructor sealing provided configuration and initializing all properties. Declaration public DefaultIntegrationContext(LightBddConfiguration configuration, IMetadataProvider metadataProvider, Func<Exception, ExecutionStatus> exceptionToStatusMapper) Parameters Type Name Description LightBddConfiguration configuration Configuration to use. IMetadataProvider metadataProvider instance to use. Func < Exception , ExecutionStatus > exceptionToStatusMapper Exception to status mapper function. Properties Configuration Returns LightBDD Configuration. Declaration public override LightBddConfiguration Configuration { get; } Property Value Type Description LightBddConfiguration ExceptionToStatusMapper Returns exception to status mapping method. Declaration public override Func<Exception, ExecutionStatus> ExceptionToStatusMapper { get; } Property Value Type Description Func < Exception , ExecutionStatus > ExecutionExtensions Returns LightBDD execution extensions. Declaration public override IExecutionExtensions ExecutionExtensions { get; } Property Value Type Description IExecutionExtensions FeatureProgressNotifier Returns feature progress notifier. Declaration public override IFeatureProgressNotifier FeatureProgressNotifier { get; } Property Value Type Description IFeatureProgressNotifier MetadataProvider Returns metadata provider. Declaration public override IMetadataProvider MetadataProvider { get; } Property Value Type Description IMetadataProvider NameFormatter Returns name formatter. Declaration public override INameFormatter NameFormatter { get; } Property Value Type Description INameFormatter ScenarioProgressNotifierProvider Returns scenario progress notifier provider method. Declaration public override Func<object, IScenarioProgressNotifier> ScenarioProgressNotifierProvider { get; } Property Value Type Description Func < System.Object , IScenarioProgressNotifier >"
  },
  "doc/LightBDD.Framework.Extensibility.html": {
    "href": "doc/LightBDD.Framework.Extensibility.html",
    "title": "Namespace LightBDD.Framework.Extensibility | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Extensibility Classes BddRunnerExtensions IBddRunner extensions. DefaultIntegrationContext A default implementation of ."
  },
  "doc/LightBDD.Framework.FeatureDescriptionAttribute.html": {
    "href": "doc/LightBDD.Framework.FeatureDescriptionAttribute.html",
    "title": "Class FeatureDescriptionAttribute | docfx seed website",
    "keywords": "Class FeatureDescriptionAttribute Feature description attribute that can be applied on feature test class. May be used to enrich feature class with description like \"In order to... As a... I want to...\" or similar, that would be used by progress notifier and would be included in summary. If given implementation supports alternative description attributes, and both are applied on class, this one would be used. Inheritance System.Object FeatureDescriptionAttribute Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public class FeatureDescriptionAttribute : Attribute, IFeatureDescriptionAttribute Constructors FeatureDescriptionAttribute(String) Constructor allowing to associate description. Declaration public FeatureDescriptionAttribute(string description) Parameters Type Name Description System.String description Properties Description Feature description. Declaration public string Description { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Framework.Formatting.Configuration.FormattingConfigurationExtensions.html": {
    "href": "doc/LightBDD.Framework.Formatting.Configuration.FormattingConfigurationExtensions.html",
    "title": "Class FormattingConfigurationExtensions | docfx seed website",
    "keywords": "Class FormattingConfigurationExtensions Configuration class allowing to retrieve NameFormatterConfiguration(LightBddConfiguration) for further customizations. See also: . Inheritance System.Object FormattingConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Formatting.Configuration Assembly :cs.temp.dll.dll Syntax public static class FormattingConfigurationExtensions Methods NameFormatterConfiguration(LightBddConfiguration) Retrieves NameFormatterConfiguration(LightBddConfiguration) from configuration for further customizations. Declaration public static NameFormatterConfiguration NameFormatterConfiguration(this LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration object. Returns Type Description NameFormatterConfiguration Configuration object."
  },
  "doc/LightBDD.Framework.Formatting.Configuration.NameFormatterConfiguration.html": {
    "href": "doc/LightBDD.Framework.Formatting.Configuration.NameFormatterConfiguration.html",
    "title": "Class NameFormatterConfiguration | docfx seed website",
    "keywords": "Class NameFormatterConfiguration Configuration class allowing to customize name formatting behavior. Inheritance System.Object NameFormatterConfiguration Namespace :LightBDD.Framework.Formatting.Configuration Assembly :cs.temp.dll.dll Syntax public class NameFormatterConfiguration : FeatureConfiguration Properties Formatter Returns formatter. By default it is initialized with DefaultNameFormatter instance. Declaration public INameFormatter Formatter { get; } Property Value Type Description INameFormatter Methods UpdateFormatter(INameFormatter) Updates Formatter with new value. Declaration public NameFormatterConfiguration UpdateFormatter(INameFormatter formatter) Parameters Type Name Description INameFormatter formatter New formatter to set. Returns Type Description NameFormatterConfiguration Self."
  },
  "doc/LightBDD.Framework.Formatting.Configuration.html": {
    "href": "doc/LightBDD.Framework.Formatting.Configuration.html",
    "title": "Namespace LightBDD.Framework.Formatting.Configuration | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Formatting.Configuration Classes FormattingConfigurationExtensions Configuration class allowing to retrieve NameFormatterConfiguration(LightBddConfiguration) for further customizations. See also: . NameFormatterConfiguration Configuration class allowing to customize name formatting behavior."
  },
  "doc/LightBDD.Framework.Formatting.DefaultNameFormatter.html": {
    "href": "doc/LightBDD.Framework.Formatting.DefaultNameFormatter.html",
    "title": "Class DefaultNameFormatter | docfx seed website",
    "keywords": "Class DefaultNameFormatter Default implementation of interface. Inheritance System.Object DefaultNameFormatter Namespace :LightBDD.Framework.Formatting Assembly :cs.temp.dll.dll Syntax public class DefaultNameFormatter : INameFormatter Methods FormatName(String) Formats name into readable text. This method applies following replacements: \" _\" -> \": \" \"_s \" -> \"'s \" \"_\" -> \" \" Declaration public string FormatName(string name) Parameters Type Name Description System.String name Name to format. Returns Type Description System.String Formatted text."
  },
  "doc/LightBDD.Framework.Formatting.FormatAttribute.html": {
    "href": "doc/LightBDD.Framework.Formatting.FormatAttribute.html",
    "title": "Class FormatAttribute | docfx seed website",
    "keywords": "Class FormatAttribute Attribute allowing to define how step parameter value should be formatted. Inheritance System.Object FormatAttribute Namespace :LightBDD.Framework.Formatting Assembly :cs.temp.dll.dll Syntax public class FormatAttribute : ParameterFormatterAttribute Constructors FormatAttribute(String) Constructor allowing to define how step parameter should be formatted. The format argument represents string.Format() format parameter, where {0} would be a passed parameter instance. Declaration public FormatAttribute(string format) Parameters Type Name Description System.String format Methods Format(CultureInfo, Object) Formats given parameter value using culture . Declaration public override string Format(CultureInfo culture, object parameter) Parameters Type Name Description CultureInfo culture Culture used in formatting. System.Object parameter Parameter to format. Returns Type Description System.String"
  },
  "doc/LightBDD.Framework.Formatting.FormatBooleanAttribute.html": {
    "href": "doc/LightBDD.Framework.Formatting.FormatBooleanAttribute.html",
    "title": "Class FormatBooleanAttribute | docfx seed website",
    "keywords": "Class FormatBooleanAttribute Attribute allowing to define formatting rules for step parameter of boolean type. Inheritance System.Object FormatBooleanAttribute Namespace :LightBDD.Framework.Formatting Assembly :cs.temp.dll.dll Syntax public class FormatBooleanAttribute : ParameterFormatterAttribute Constructors FormatBooleanAttribute(String, String) Constructor allowing to associate string constants that would be used for true and false value. Declaration public FormatBooleanAttribute(string trueValue, string falseValue) Parameters Type Name Description System.String trueValue String constant used for true value. System.String falseValue String constant used for false value. Methods Format(CultureInfo, Object) Formats given parameter value using culture . Declaration public override string Format(CultureInfo culture, object parameter) Parameters Type Name Description CultureInfo culture Culture used in formatting. System.Object parameter Parameter to format. Returns Type Description System.String"
  },
  "doc/LightBDD.Framework.Formatting.FormatCollectionAttribute.html": {
    "href": "doc/LightBDD.Framework.Formatting.FormatCollectionAttribute.html",
    "title": "Class FormatCollectionAttribute | docfx seed website",
    "keywords": "Class FormatCollectionAttribute Attribute allowing to define formatting rules for method parameter of type implementing interface. Inheritance System.Object FormatCollectionAttribute Namespace :LightBDD.Framework.Formatting Assembly :cs.temp.dll.dll Syntax public class FormatCollectionAttribute : ParameterFormatterAttribute Constructors FormatCollectionAttribute(String, String) Constructor allowing to specify separator and value format. Declaration public FormatCollectionAttribute(string separator = null, string valueFormat = null) Parameters Type Name Description System.String separator Value separator. If null , \", \" will be used. System.String valueFormat Value format. If null , \"{0}\" will be used. Methods Format(CultureInfo, Object) Formats given parameter value using culture . Declaration public override string Format(CultureInfo culture, object parameter) Parameters Type Name Description CultureInfo culture Culture used in formatting. System.Object parameter Parameter to format. Returns Type Description System.String"
  },
  "doc/LightBDD.Framework.Formatting.html": {
    "href": "doc/LightBDD.Framework.Formatting.html",
    "title": "Namespace LightBDD.Framework.Formatting | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Formatting Classes DefaultNameFormatter Default implementation of interface. FormatAttribute Attribute allowing to define how step parameter value should be formatted. FormatBooleanAttribute Attribute allowing to define formatting rules for step parameter of boolean type. FormatCollectionAttribute Attribute allowing to define formatting rules for method parameter of type implementing interface."
  },
  "doc/LightBDD.Framework.IBddRunner-1.html": {
    "href": "doc/LightBDD.Framework.IBddRunner-1.html",
    "title": "Interface IBddRunner<TContext> | docfx seed website",
    "keywords": "Interface IBddRunner<TContext> The base runner interface describing runner that can execute scenarios within specified context. See also: IBddRunner . Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public interface IBddRunner<TContext> Type Parameters Name Description TContext The context type that would be used in scenario execution."
  },
  "doc/LightBDD.Framework.IBddRunner.html": {
    "href": "doc/LightBDD.Framework.IBddRunner.html",
    "title": "Interface IBddRunner | docfx seed website",
    "keywords": "Interface IBddRunner Main LightBDD runner interface that should be used in all LightBDD tests. The interface describes the runner with no context - please browse \"LightBDD.Framework.Scenarios.Contextual\" namespace for contextual runners extension methods. The runner instance can be obtained by installing package from \"LightBDD.Integration. \" group and deriving test class from FeatureFixture class offered by integration package. The \"LightBDD.Framework.Scenarios. \" namespaces offers a set of extension methods to execute tests with this runner. Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public interface IBddRunner : IBddRunner<NoContext>"
  },
  "doc/LightBDD.Framework.LabelAttribute.html": {
    "href": "doc/LightBDD.Framework.LabelAttribute.html",
    "title": "Class LabelAttribute | docfx seed website",
    "keywords": "Class LabelAttribute Label attribute that can be applied on feature test class or scenario method. May be used to link feature/scenario with external tools by storing ticket number. Multiple labels per item are supported. Inheritance System.Object LabelAttribute Namespace :LightBDD.Framework Assembly :cs.temp.dll.dll Syntax public class LabelAttribute : Attribute, ILabelAttribute Constructors LabelAttribute(String) Constructor allowing to associate label text. Declaration public LabelAttribute(string label) Parameters Type Name Description System.String label Label. Properties Label Specified label. Declaration public string Label { get; } Property Value Type Description System.String"
  },
  "doc/LightBDD.Framework.Notification.Configuration.html": {
    "href": "doc/LightBDD.Framework.Notification.Configuration.html",
    "title": "Namespace LightBDD.Framework.Notification.Configuration | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Notification.Configuration Classes FeatureProgressNotifierConfiguration Configuration class allowing to customize feature progress notification behavior. NotificationConfigurationExtensions Configuration class allowing to retrieve progress notification configurations for further customizations. See also: . ScenarioProgressNotifierConfiguration Configuration class allowing to customize scenario progress notification behavior."
  },
  "doc/LightBDD.Framework.Notification.DefaultProgressNotifier.html": {
    "href": "doc/LightBDD.Framework.Notification.DefaultProgressNotifier.html",
    "title": "Class DefaultProgressNotifier | docfx seed website",
    "keywords": "Class DefaultProgressNotifier The default implementation of and which renders the notification text and delegates to provided notification actions configured in constructor. Inheritance System.Object DefaultProgressNotifier Namespace :LightBDD.Framework.Notification Assembly :cs.temp.dll.dll Syntax public class DefaultProgressNotifier : IScenarioProgressNotifier, IFeatureProgressNotifier Constructors DefaultProgressNotifier(Action<String>[]) Initializes the notifier with onNotify actions that will be used to delegate the rendered notification text. Declaration public DefaultProgressNotifier(params Action<string>[] onNotify) Parameters Type Name Description Action < System.String >[] onNotify Methods NotifyFeatureFinished(IFeatureResult) Notifies that feature has finished. Declaration public void NotifyFeatureFinished(IFeatureResult feature) Parameters Type Name Description IFeatureResult feature Feature result. NotifyFeatureStart(IFeatureInfo) Notifies that feature has started. Declaration public void NotifyFeatureStart(IFeatureInfo feature) Parameters Type Name Description IFeatureInfo feature Feature info. NotifyScenarioFinished(IScenarioResult) Notifies that scenario has finished. Declaration public void NotifyScenarioFinished(IScenarioResult scenario) Parameters Type Name Description IScenarioResult scenario Scenario result. NotifyScenarioStart(IScenarioInfo) Notifies that scenario has started. Declaration public void NotifyScenarioStart(IScenarioInfo scenario) Parameters Type Name Description IScenarioInfo scenario Scenario info. NotifyStepComment(IStepInfo, String) Notifies that step has been commented. Declaration public void NotifyStepComment(IStepInfo step, string comment) Parameters Type Name Description IStepInfo step Step info. System.String comment Comment. NotifyStepFinished(IStepResult) Notifies that step has finished. Declaration public void NotifyStepFinished(IStepResult step) Parameters Type Name Description IStepResult step Step result. NotifyStepStart(IStepInfo) Notifies that step has started. Declaration public void NotifyStepStart(IStepInfo step) Parameters Type Name Description IStepInfo step Step info."
  },
  "doc/LightBDD.Framework.Notification.DelegatingFeatureProgressNotifier.html": {
    "href": "doc/LightBDD.Framework.Notification.DelegatingFeatureProgressNotifier.html",
    "title": "Class DelegatingFeatureProgressNotifier | docfx seed website",
    "keywords": "Class DelegatingFeatureProgressNotifier Feature progress notifier allowing to delegate notification to zero or more notifiers. Inheritance System.Object DelegatingFeatureProgressNotifier Namespace :LightBDD.Framework.Notification Assembly :cs.temp.dll.dll Syntax public class DelegatingFeatureProgressNotifier : IFeatureProgressNotifier Constructors DelegatingFeatureProgressNotifier(IFeatureProgressNotifier[]) Constructor configuring notifier to delegate all the notifications to provided notifiers . Declaration public DelegatingFeatureProgressNotifier(params IFeatureProgressNotifier[] notifiers) Parameters Type Name Description IFeatureProgressNotifier [] notifiers Notifiers to delegate notifications to. Methods NotifyFeatureFinished(IFeatureResult) Notifies that feature has finished. Declaration public void NotifyFeatureFinished(IFeatureResult feature) Parameters Type Name Description IFeatureResult feature Feature result. NotifyFeatureStart(IFeatureInfo) Notifies that feature has started. Declaration public void NotifyFeatureStart(IFeatureInfo feature) Parameters Type Name Description IFeatureInfo feature Feature info."
  },
  "doc/LightBDD.Framework.Notification.DelegatingScenarioProgressNotifier.html": {
    "href": "doc/LightBDD.Framework.Notification.DelegatingScenarioProgressNotifier.html",
    "title": "Class DelegatingScenarioProgressNotifier | docfx seed website",
    "keywords": "Class DelegatingScenarioProgressNotifier Scenario progress notifier allowing to delegate notification to zero or more notifiers. Inheritance System.Object DelegatingScenarioProgressNotifier Namespace :LightBDD.Framework.Notification Assembly :cs.temp.dll.dll Syntax public class DelegatingScenarioProgressNotifier : IScenarioProgressNotifier Constructors DelegatingScenarioProgressNotifier(IScenarioProgressNotifier[]) Constructor configuring notifier to delegate all the notifications to provided notifiers . Declaration public DelegatingScenarioProgressNotifier(params IScenarioProgressNotifier[] notifiers) Parameters Type Name Description IScenarioProgressNotifier [] notifiers Notifiers to delegate notifications to. Methods NotifyScenarioFinished(IScenarioResult) Notifies that scenario has finished. Declaration public void NotifyScenarioFinished(IScenarioResult scenario) Parameters Type Name Description IScenarioResult scenario Scenario result. NotifyScenarioStart(IScenarioInfo) Notifies that scenario has started. Declaration public void NotifyScenarioStart(IScenarioInfo scenario) Parameters Type Name Description IScenarioInfo scenario Scenario info. NotifyStepComment(IStepInfo, String) Notifies that step has been commented. Declaration public void NotifyStepComment(IStepInfo step, string comment) Parameters Type Name Description IStepInfo step Step info. System.String comment Comment. NotifyStepFinished(IStepResult) Notifies that step has finished. Declaration public void NotifyStepFinished(IStepResult step) Parameters Type Name Description IStepResult step Step result. NotifyStepStart(IStepInfo) Notifies that step has started. Declaration public void NotifyStepStart(IStepInfo step) Parameters Type Name Description IStepInfo step Step info."
  },
  "doc/LightBDD.Framework.Notification.NoProgressNotifier.html": {
    "href": "doc/LightBDD.Framework.Notification.NoProgressNotifier.html",
    "title": "Class NoProgressNotifier | docfx seed website",
    "keywords": "Class NoProgressNotifier Progress notifier implementation that does nothing when called. Inheritance System.Object NoProgressNotifier Namespace :LightBDD.Framework.Notification Assembly :cs.temp.dll.dll Syntax public class NoProgressNotifier : IFeatureProgressNotifier, IScenarioProgressNotifier Properties Default Returns default instance. Declaration public static NoProgressNotifier Default { get; } Property Value Type Description NoProgressNotifier Methods NotifyFeatureFinished(IFeatureResult) Does nothing. Declaration public void NotifyFeatureFinished(IFeatureResult feature) Parameters Type Name Description IFeatureResult feature NotifyFeatureStart(IFeatureInfo) Does nothing. Declaration public void NotifyFeatureStart(IFeatureInfo feature) Parameters Type Name Description IFeatureInfo feature NotifyScenarioFinished(IScenarioResult) Does nothing. Declaration public void NotifyScenarioFinished(IScenarioResult scenario) Parameters Type Name Description IScenarioResult scenario NotifyScenarioStart(IScenarioInfo) Does nothing. Declaration public void NotifyScenarioStart(IScenarioInfo scenario) Parameters Type Name Description IScenarioInfo scenario NotifyStepComment(IStepInfo, String) Does nothing. Declaration public void NotifyStepComment(IStepInfo step, string comment) Parameters Type Name Description IStepInfo step System.String comment NotifyStepFinished(IStepResult) Does nothing. Declaration public void NotifyStepFinished(IStepResult step) Parameters Type Name Description IStepResult step NotifyStepStart(IStepInfo) Does nothing. Declaration public void NotifyStepStart(IStepInfo step) Parameters Type Name Description IStepInfo step"
  },
  "doc/LightBDD.Framework.Notification.ParallelProgressNotifierProvider.html": {
    "href": "doc/LightBDD.Framework.Notification.ParallelProgressNotifierProvider.html",
    "title": "Class ParallelProgressNotifierProvider | docfx seed website",
    "keywords": "Class ParallelProgressNotifierProvider Class providing implementations of and interfaces. The implementations are designed to provide notifications that would be still understandable when scenarios are executed in parallel. Each notification entry is prefixed with text showing total number of processed, failed and currently running scenarios as well as scenario number the message is notified for. Inheritance System.Object ParallelProgressNotifierProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Notification Assembly :cs.temp.dll.dll Syntax public class ParallelProgressNotifierProvider Constructors ParallelProgressNotifierProvider() Default constructor. The class should not be instantiated directly, but rather Default property should be used to get provider instance. Declaration protected ParallelProgressNotifierProvider() Properties Default Returns default instance of provider. Declaration public static ParallelProgressNotifierProvider Default { get; } Property Value Type Description ParallelProgressNotifierProvider Methods CreateFeatureProgressNotifier(Action<String>[]) Creates instance which would call onNotify actions with formatted notifications. The created notifier does nothing with formatted notifications that is why onNotify should contain at least 1 action in order to get notifications working. Declaration public IFeatureProgressNotifier CreateFeatureProgressNotifier(params Action<string>[] onNotify) Parameters Type Name Description Action < System.String >[] onNotify Actions that would be called with formatted notifications. Returns Type Description IFeatureProgressNotifier instance. CreateScenarioProgressNotifier(Action<String>[]) Creates instance which would call onNotify actions with formatted notifications. The created notifier does nothing with formatted notifications that is why onNotify should contain at least 1 action in order to get notifications working. Declaration public IScenarioProgressNotifier CreateScenarioProgressNotifier(params Action<string>[] onNotify) Parameters Type Name Description Action < System.String >[] onNotify Actions that would be called with formatted notifications. Returns Type Description IScenarioProgressNotifier instance."
  },
  "doc/LightBDD.Framework.Notification.html": {
    "href": "doc/LightBDD.Framework.Notification.html",
    "title": "Namespace LightBDD.Framework.Notification | docfx seed website",
    "keywords": "Namespace LightBDD.Framework.Notification Classes DefaultProgressNotifier The default implementation of and which renders the notification text and delegates to provided notification actions configured in constructor. DelegatingFeatureProgressNotifier Feature progress notifier allowing to delegate notification to zero or more notifiers. DelegatingScenarioProgressNotifier Scenario progress notifier allowing to delegate notification to zero or more notifiers. NoProgressNotifier Progress notifier implementation that does nothing when called. ParallelProgressNotifierProvider Class providing implementations of and interfaces. The implementations are designed to provide notifications that would be still understandable when scenarios are executed in parallel. Each notification entry is prefixed with text showing total number of processed, failed and currently running scenarios as well as scenario number the message is notified for."
  },
  "doc/LightBDD.Framework.Reporting.Configuration.ReportConfigurationExtensions.html": {
    "href": "doc/LightBDD.Framework.Reporting.Configuration.ReportConfigurationExtensions.html",
    "title": "Class ReportConfigurationExtensions | docfx seed website",
    "keywords": "Class ReportConfigurationExtensions Configuration class allowing to retrieve report writers configurations for further customizations. See also: . Inheritance System.Object ReportConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting.Configuration Assembly :cs.temp.dll.dll Syntax public static class ReportConfigurationExtensions Methods ReportWritersConfiguration(LightBddConfiguration) Retrieves ReportWritersConfiguration(LightBddConfiguration) from configuration for further customizations. Declaration public static ReportWritersConfiguration ReportWritersConfiguration(this LightBddConfiguration configuration) Parameters Type Name Description LightBddConfiguration configuration Configuration object. Returns Type Description ReportWritersConfiguration Configuration object."
  },
  "doc/LightBDD.Framework.Reporting.FeatureReportExtensions.html": {
    "href": "doc/LightBDD.Framework.Reporting.FeatureReportExtensions.html",
    "title": "Class FeatureReportExtensions | docfx seed website",
    "keywords": "Class FeatureReportExtensions Helper methods to work on feature results Inheritance System.Object FeatureReportExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting Assembly :cs.temp.dll.dll Syntax public static class FeatureReportExtensions Methods CountScenarios(IEnumerable<IFeatureResult>) Counts all scenarios. Declaration public static int CountScenarios(this IEnumerable<IFeatureResult> results) Parameters Type Name Description IEnumerable < IFeatureResult > results Returns Type Description System.Int32 CountScenariosWithStatus(IEnumerable<IFeatureResult>, ExecutionStatus) Counts all scenarios with given status. Declaration public static int CountScenariosWithStatus(this IEnumerable<IFeatureResult> results, ExecutionStatus status) Parameters Type Name Description IEnumerable < IFeatureResult > results ExecutionStatus status Returns Type Description System.Int32 CountScenariosWithStatus(IFeatureResult, ExecutionStatus) Counts scenarios that belongs to given feature and have given status. Declaration public static int CountScenariosWithStatus(this IFeatureResult result, ExecutionStatus status) Parameters Type Name Description IFeatureResult result ExecutionStatus status Returns Type Description System.Int32 CountSteps(IEnumerable<IFeatureResult>) Counts all steps. Declaration public static int CountSteps(this IEnumerable<IFeatureResult> results) Parameters Type Name Description IEnumerable < IFeatureResult > results Returns Type Description System.Int32 CountSteps(IFeatureResult) Counts all steps. Declaration public static int CountSteps(this IFeatureResult result) Parameters Type Name Description IFeatureResult result Returns Type Description System.Int32 CountStepsWithStatus(IEnumerable<IFeatureResult>, ExecutionStatus) Counts all steps with given status. Declaration public static int CountStepsWithStatus(this IEnumerable<IFeatureResult> results, ExecutionStatus status) Parameters Type Name Description IEnumerable < IFeatureResult > results ExecutionStatus status Returns Type Description System.Int32 CountStepsWithStatus(IFeatureResult, ExecutionStatus) Counts all steps with given status. Declaration public static int CountStepsWithStatus(this IFeatureResult result, ExecutionStatus status) Parameters Type Name Description IFeatureResult result ExecutionStatus status Returns Type Description System.Int32 CountStepsWithStatus(IScenarioResult, ExecutionStatus) Counts all steps with given status. Declaration public static int CountStepsWithStatus(this IScenarioResult result, ExecutionStatus status) Parameters Type Name Description IScenarioResult result ExecutionStatus status Returns Type Description System.Int32 GetTestExecutionTimeSummary(IEnumerable<IFeatureResult>) Returns execution summary for provided results . Declaration public static ExecutionTimeSummary GetTestExecutionTimeSummary(this IEnumerable<IFeatureResult> results) Parameters Type Name Description IEnumerable < IFeatureResult > results Results to calculate execution summary for. Returns Type Description ExecutionTimeSummary ExecutionTimeSummary object. GetTestExecutionTimeSummary(IEnumerable<IScenarioResult>) Returns execution summary for provided results . Declaration public static ExecutionTimeSummary GetTestExecutionTimeSummary(this IEnumerable<IScenarioResult> results) Parameters Type Name Description IEnumerable < IScenarioResult > results Results to calculate execution summary for. Returns Type Description ExecutionTimeSummary ExecutionTimeSummary object."
  },
  "doc/LightBDD.Framework.Reporting.Formatters.HtmlReportFormatter.html": {
    "href": "doc/LightBDD.Framework.Reporting.Formatters.HtmlReportFormatter.html",
    "title": "Class HtmlReportFormatter | docfx seed website",
    "keywords": "Class HtmlReportFormatter Formats feature results as HTML. Inheritance System.Object HtmlReportFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting.Formatters Assembly :cs.temp.dll.dll Syntax public class HtmlReportFormatter : IReportFormatter Methods Format(Stream, IFeatureResult[]) Formats provided feature results and writes to the stream . Declaration public void Format(Stream stream, params IFeatureResult[] features) Parameters Type Name Description Stream stream Stream to write formatted results to. IFeatureResult [] features Feature results to format. Implements IReportFormatter.Format(Stream, IFeatureResult[])"
  },
  "doc/LightBDD.Framework.Reporting.Formatters.IReportFormatter.html": {
    "href": "doc/LightBDD.Framework.Reporting.Formatters.IReportFormatter.html",
    "title": "Interface IReportFormatter | docfx seed website",
    "keywords": "Interface IReportFormatter Report formatter interface. Namespace :LightBDD.Framework.Reporting.Formatters Assembly :cs.temp.dll.dll Syntax public interface IReportFormatter Methods Format(Stream, IFeatureResult[]) Formats provided feature results and writes to the stream . Declaration void Format(Stream stream, params IFeatureResult[] features) Parameters Type Name Description Stream stream Stream to write formatted results to. IFeatureResult [] features Feature results to format."
  },
  "doc/LightBDD.Framework.Reporting.Formatters.PlainTextReportFormatter.html": {
    "href": "doc/LightBDD.Framework.Reporting.Formatters.PlainTextReportFormatter.html",
    "title": "Class PlainTextReportFormatter | docfx seed website",
    "keywords": "Class PlainTextReportFormatter Formats feature results as plain text. Inheritance System.Object PlainTextReportFormatter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :LightBDD.Framework.Reporting.Formatters Assembly :cs.temp.dll.dll Syntax public class PlainTextReportFormatter : IReportFormatter Methods Format(Stream, IFeatureResult[]) Formats provided feature results and writes to the stream . Declaration public void Format(Stream stream, params IFeatureResult[] features) Parameters Type Name Description Stream stream Stream to write formatted results to. IFeatureResult [] features Feature results to format. Implements IReportFormatter.Format(Stream, IFeatureResult[])"
  }
}